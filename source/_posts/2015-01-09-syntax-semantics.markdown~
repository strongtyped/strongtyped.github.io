---
layout: post
title: "Syntax and Semantics"
date: 2015-01-09	 06:00:00 +0200
author: Luc Duponcheel
comments: true
---

This blog post is about _syntax and semantics_ in general and syntax and semantics for dealing with _external effects_ in particular.

The content of this blog post is, in many ways, _similar to_, and, at the same time, in many ways, _different from_

* _chapter 13_ of the [_Functional Programming in Scala_](http://www.manning.com/bjarnason/) book
and
* [_RÃºnar Bjarnason's talk at ScalaDays 2014_](https://parleys.com/play/53a7d2c3e4b0543940d9e538/chapter0/about).

This blog post correponds to a talk that I will give in 2015 at various places.

The content of this blog post (deliberately) does not go into all details.
In fact it just presents the source code without a lot of explanation.

Feel free to go to one of my talks

<!-- more -->


Introduction
------------

Let's start with a general programming rule from, perhaps somewhat surprisingly, the _Unix system programming world_:

* _Fold knowledge into data so, program logic can be stupid and robust._

This rule can, somehow, be specialized to:

* _Separate the description of program logic from it's execution._

Within the _pure functional programming world_ this rule can, somehow, be specialized even more:

* _Separate the pure description of effects from the impure execution of the corresponding side effects._

This is where (descriptive) _syntax_ and (executable) _semantics_ enter the picture.


Modularity
----------

Ideally, both syntax and semantics should be _modular_ in some way or another.

This blog post only concentrates on modular syntax.

Modular semantics will be dealt with in another blog post.


Transformations
---------------

_Transformations_ are formalized by the `~>` `trait` below

{% include_code SyntaxSemantics_Transformation lang:scala SyntaxSemantics_Transformation.scala %}

The _identity transformation_ is formalized by the `id` `def` below

{% include_code SyntaxSemantics_Id lang:scala SyntaxSemantics_Id.scala %}


Sums
----

_Sums_ are formalized by the `++` `type` below

{% include_code SyntaxSemantics_Sum lang:scala SyntaxSemantics_Sum.scala %}

The _left sum_ and _right sum_ are formalized by the `left` `def` and `right` `def` below

{% include_code SyntaxSemantics_LeftAndRightSum lang:scala SyntaxSemantics_LeftAndRightSum.scala %}

The relationship between sums and transformations is formalized by the `++` `def` of the `~>` `trait` below

{% include_code SyntaxSemantics_SumTransformation lang:scala SyntaxSemantics_SumTransformation.scala %}


Subtypes
--------

_Subtypes_ and their relationship with sums are formalized by the `<=` `trait` and the `subReflect`, `subRight`, and `subTransLeft` `implicit def`'s below

{% include_code SyntaxSemantics_Subtype lang:scala SyntaxSemantics_Subtype.scala %}


Products
--------

_Products_ are formalized by the `**` `type` below

{% include_code SyntaxSemantics_Product lang:scala SyntaxSemantics_Product.scala %}


Computational features
----------------------

_Basic computational features_ are formalized by the `Res`, `Bnd` `And` and `Exc`, `trait`'s below

{% include_code SyntaxSemantics_BasicComputationalFeatures lang:scala SyntaxSemantics_BasicComputationalFeatures.scala %}

Note that `Exc` makes use of a `ResourceFactory`.

_Combined computational features_ are formalized by the `Cmp`, `ExcCmp` and `Prg`, `trait`'s below

{% include_code SyntaxSemantics_CombinedComputationalFeatures lang:scala SyntaxSemantics_CombinedComputationalFeatures.scala %}

The `trait`'s above define _type classes_.

The `Prog` `trait` below defines the corresponding _Programming DSL_.

{% include_code SyntaxSemantics_ProgrammingDSL lang:scala SyntaxSemantics_ProgrammingDSL.scala %}


Syntax
------

_Syntax_ is formalized by the `Syntax` `trait` below

{% include_code SyntaxSemantics_Syntax lang:scala SyntaxSemantics_Syntax.scala %}

Note that the `trait` defines both an `active` `def` and a `reactive` `def`.
The `reactive` `def` has a default implementation, that, of course, needs to be overriden to _really_ be reactive.

The `meaning` of syntax is formalized by the `Meaning` `trait` below

{% include_code SyntaxSemantics_Meaning lang:scala SyntaxSemantics_Meaning.scala %}


Program Syntax
--------------

_Program syntax_ is formalized by the `Program` `class` below

{% include_code SyntaxSemantics_ProgramSyntax lang:scala SyntaxSemantics_ProgramSyntax.scala %}

Here are some computational feature requirements to note

* for syntax: `Syntax[+_]: Res`
* for semantics: `Semantics[+_]: Cmp`


Extra Computational features for program semantics
--------------------------------------------------

_Extra Computational features for program semantics_ are formalized by the `Now`, `ActFtr` and `RctFtr`, `trait`'s below

{% include_code SyntaxSemantics_ExtraComputationalFeatures lang:scala SyntaxSemantics_ExtraComputationalFeatures.scala %}


Pure program with impure main
-----------------------------

Let's start with a _pure program_ with an _impure main_ to get a fealing about which kind of things we want to support, and what the problems are to be solved with the machinery described above

{% include_code SyntaxSemantics_PureProgramImpureMain lang:scala SyntaxSemantics_PureProgramImpureMain.scala %}

Note that `bndProgram` and `andProgram` are both pure, but `bndMain` and `andMain` (used by `main`) are both impure.


Still a pure program with an impure main
----------------------------------------

Let's now try to solve the problem above by using our machinery.


`IdentitySyntaxModule`
----------------------

The syntax we need is formalized by the `IdentitySyntaxModule` `object` below

{% include_code SyntaxSemantics_IdentitySyntaxModule lang:scala SyntaxSemantics_IdentitySyntaxModule.scala %}


`NowSemanticsModule`
--------------------

The semantics we need is formalized by the `NowSemanticsModule` `object` below

{% include_code SyntaxSemantics_NowSemanticsModule lang:scala SyntaxSemantics_NowSemanticsModule.scala %}


`IdentityProgramModule`
-----------------------

A _pure program_ and _pure main expression_ can now be written as in the `IdentityProgramModule` `object` below

{% include_code SyntaxSemantics_IdentityProgramModule lang:scala SyntaxSemantics_IdentityProgramModule.scala %}

Unfortunately, `bndMain` and `andMain` (used by `main`) are still impure

{% include_code SyntaxSemantics_StillPureProgramImpureMain lang:scala SyntaxSemantics_StillPureProgramImpureMain.scala %}


Pure program with pure main
---------------------------

Let's now _really_ solve the problem above by using our machinery.


`ConsoleSyntaxModule`
---------------------

The syntax we need is formalized by the `ConsoleSyntaxModule` `object` below

(Actually, only `consoleSyncPrint` is needed for now.)

{% include_code SyntaxSemantics_ConsoleSyntaxModule lang:scala SyntaxSemantics_ConsoleSyntaxModule.scala %}


`ConsoleEffectProgramModule`
----------------------------

A _pure program_ and _pure main expression_ can now be written as in the `ConsoleEffectProgramModule` `object` below

{% include_code SyntaxSemantics_ConsoleEffectProgramModule lang:scala SyntaxSemantics_ConsoleEffectProgramModule.scala %}

Finally, `main` is pure

{% include_code SyntaxSemantics_PureProgramPureMain lang:scala SyntaxSemantics_PureProgramPureMain.scala %}


Effect syntax with active future semantics
------------------------------------------

Let's do some more interesting stuff.


`ActiveSocketSyntaxModule`
---------------------

The syntax we need is formalized by the `ActiveSocketSyntaxModule` `object` below

{% include_code SyntaxSemantics_ActiveSocketSyntaxModule lang:scala SyntaxSemantics_ActiveSocketSyntaxModule.scala %}


`ActiveFutureSemanticsModule`
--------------------

The semantics we need is formalized by the `ActiveFutureSemanticsModule` `object` below

{% include_code SyntaxSemantics_ActiveFutureSemanticsModule lang:scala SyntaxSemantics_ActiveFutureSemanticsModule.scala %}


`ActiveEffectProgramModule`
----------------------------

A _pure program_ and _pure main expression_ can now be written as in the `ActiveEffectProgramModule` `object` below

{% include_code SyntaxSemantics_ActiveEffectProgramModule lang:scala SyntaxSemantics_ActiveEffectProgramModule.scala %}

Again, `main` is pure

{% include_code SyntaxSemantics_ActiveEffectMain lang:scala SyntaxSemantics_ActiveEffectMain.scala %}


`ActiveRequestServer`
---------------------

In order to run the code we need an _active request server_

{% include_code SyntaxSemantics_ActiveRequestServer lang:scala SyntaxSemantics_ActiveRequestServer.scala %}


`ActiveResponseServer`
---------------------

In order to run the code we need an _active response server_

{% include_code SyntaxSemantics_ActiveResponseServer lang:scala SyntaxSemantics_ActiveResponseServer.scala %}



Effect syntax with reactive future semantics
--------------------------------------------


Let's do some more interesting stuff.


`ReactiveSocketSyntaxModule`
----------------------------

The syntax we need is formalized by the `ReactiveSocketSyntaxModule` `object` below

{% include_code SyntaxSemantics_ReactiveSocketSyntaxModule lang:scala SyntaxSemantics_ReactiveSocketSyntaxModule.scala %}


`ReactiveFutureSemanticsModule`
-------------------------------

The semantics we need is formalized by the `ReactiveFutureSemanticsModule` `object` below

{% include_code SyntaxSemantics_ReactiveFutureSemanticsModule lang:scala SyntaxSemantics_ReactiveFutureSemanticsModule.scala %}


`ReactiveEffectProgramModule`
-----------------------------

A _pure program_ and _pure main expression_ can now be written as in the `ReactiveEffectProgramModule` `object` below

{% include_code SyntaxSemantics_ReactiveEffectProgramModule lang:scala SyntaxSemantics_ReactiveEffectProgramModule.scala %}

Again, `main` is pure

{% include_code SyntaxSemantics_ReactiveEffectMain lang:scala SyntaxSemantics_ReactiveEffectMain.scala %}


`ReactiveResponseServer`
------------------------


In order to run the code we need a _reactive response server_

{% include_code SyntaxSemantics_ReactiveResponseServer lang:scala SyntaxSemantics_ReactiveResponseServer.scala %}



	

























 









