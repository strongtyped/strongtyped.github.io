<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Strong[Typed]]]></title>
  <link href="http://www.strongtyped.io/atom.xml" rel="self"/>
  <link href="http://www.strongtyped.io/"/>
  <updated>2014-05-14T13:44:40+02:00</updated>
  <id>http://www.strongtyped.io/</id>
  <author>
    <name><![CDATA[StrongTyped.io]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reactive Programming: Notification Versus Observable]]></title>
    <link href="http://www.strongtyped.io/blog/2014/05/14/reactive-programming-notification-observable/"/>
    <updated>2014-05-14T08:25:00+02:00</updated>
    <id>http://www.strongtyped.io/blog/2014/05/14/reactive-programming-notification-observable</id>
    <content type="html"><![CDATA[<p><a href="http://www.strongtyped.io/">home</a></p>

<p>This is a second of two blog posts of about <em>Reactive Programming in Scala</em>.
The first blog post about <a href="http://www.strongtyped.io/blog/2014/05/11/reactive-programming-try-future"><em>Reactive Programming: Try versus Future</em></a>
covered <em>reactive programs resulting in one value</em>.
This second blog post covers <em>reactive programs resulting in many (zero or more) values</em>.</p>

<p><strong>Remark:</strong>
The types that are used in this blog post exist in the
<a href="https://github.com/Netflix/RxJava/tree/master/language-adaptors/rxjava-scala">Scala Adaptor for RxJava</a> library.
We refer to this library as the RxScala library.
In contrast with the previous blog post, this blog post puts less emphasis on how
to <em>define</em> computations. It puts more emphasis on how to <em>use</em> computations.</p>

<!-- more -->


<h2>The <code>Notification</code> type</h2>

<p>The <code>Notification</code> type plays a role similar to the <code>Try</code> type, but
it is not considered as a <em>computation</em> type (although it could be).
Just like <code>Try</code> is a type that is similar to <code>Option</code>,
<code>Notification</code> is a type that is similar to <code>Iterable</code>
(but they both also somehow deal with failure).</p>

<p>The <code>Notification</code> trait represents a value that is
a <em>next</em> value, an <em>error value</em> or a <em>marker value</em>
indicating that there are no more values.
An instance of <code>Notification[Z]</code> is
an instance of <code>OnNext[Z]</code> holding a value of type <code>Z</code>,
an instance of <code>OnError[Z]</code> holding an error of type <code>Throwable</code>
or an instance of <code>OnCompleted[Z]</code> holding no value at all.</p>

<p>Code that makes use a value <code>nz</code> of type <code>Notification[Z]</code>,
typically, makes use of a <code>match</code> on <code>nz</code>, which, you can think of as code that</p>

<ul>
<li>in a synchronous (blocking) way, <em>pulls</em> a
next value, error value or marker non-value
out of <code>nz</code>.</li>
</ul>


<p>In fact, this blog post is rarely uses notifications directly in this way.
Much in the spirit of reactive programming,
and as the names of the classes extending <code>Notification</code> suggest,
notifications values are at their best when used as values that
are <em>pushed</em> rather than <em>pulled</em>.</p>

<p>Notifications values can, just as computations of type <code>Try</code>, be materialized.
This blog post does not go into details.</p>

<h2>Computations of type <code>Observable</code></h2>

<p>A value of type <code>Notification[Z]</code> that is defined as a <code>def</code>
is essentially the same as a value of type <code>Unit =&gt; Notification[Z]</code>.
The <em>dual</em> of such a value, obtained by reversing the arrow <code>=&gt;</code>,
is a value of type <code>Notification[Z] =&gt; Unit</code>.
This dual is, in a way, the same as a value of type <code>Observer[Z]</code>
since the <code>Observer[-Z]</code> trait of RxScala has three methods</p>

<ul>
<li><code>def onNext(value: Z): Unit</code></li>
<li><code>def onError(error: Throwable): Unit</code></li>
<li><code>def onCompleted(): Unit</code></li>
</ul>


<p>In a way (as illustrated in the following section)
an <code>Observable[Z]</code> value is the <em>dual</em> of an <code>Observer[Z]</code> value,
and, as such, the <em>bi-dual</em> of a <code>Notification[Z]</code> value.</p>

<p>More precisely, in a way, <code>Observable[Z]</code> is the same as <code>Observer[Z] =&gt; Unit</code>,
which, in a way, is the same as <code>(Notification[Z] =&gt; Unit) =&gt; Unit</code>.</p>

<p>This <em>bi-duality</em> turns out to transform synchronous values of type <code>Notification</code>
into asynchronous computations of type <code>Observable</code>.</p>

<h2>Materializing failure and latency using <code>mkObservable</code></h2>

<p>Just as the code in the <a href="http://www.strongtyped.io/blog/2014/05/11/reactive-programming-try-future">previous blog post</a> did for <code>Future</code>
the code below materializes failure and latency for <code>Observable</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">mkObservable</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">sz2u</span><span class="k">:</span> <span class="kt">Subscriber</span><span class="o">[</span><span class="kt">Z</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span><span class="k">:</span> <span class="kt">Observable</span><span class="o">[</span><span class="kt">Z</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="nc">Observable</span><span class="o">(</span><span class="n">sz2u</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The RxScala library has an <code>apply</code> method in the <code>Observable</code> companion object
that we use (in a trivial way) to define <code>mkObservable</code>.
The definition of <code>mkObservable</code> is given for consistency reasons only
(cfr. <code>mkTry</code> and <code>mkFuture</code> of the <a href="http://www.strongtyped.io/blog/2014/05/11/reactive-programming-try-future"> previous blog post</a>).</p>

<p>We did not define <code>Subscriber[Z]</code> yet. Below is its definition</p>

<ul>
<li><code>trait Subscriber[-Z] extends Observer[Z] with Subscription</code></li>
</ul>


<p>So, a subscriber is just a special observer.</p>

<p>When considering <code>mkObservable</code> as the <em>only</em> way to
make an observable, in a way, <code>Observable[Z]</code> becomes the same as <code>Observer[Z] =&gt; Unit</code>.</p>

<p>An observer can <em>subscribe</em> to an observable as shown by the following method of the <code>Observable[Z]</code> class below</p>

<ul>
<li><code>def subscribe(observer: Observer[T]): Subscription</code></li>
</ul>


<p>We did not define <code>Subscription</code> yet. It is a trait with the following methods</p>

<ul>
<li><code>def isUnsubscribed: Boolean</code></li>
<li><code>def unsubscribe(): Unit</code></li>
</ul>


<p>The main reason why <em>subscriptions</em> exist is because observables
push <em>many</em> values to subscribed observers and there should be a way for subscribed observers to
unsubscribe from a subscription so that no more values are pushed to them.</p>

<p>It is important that you understand the <em>usage</em> of <code>mkObservable</code></p>

<ul>
<li>you can make an observable by defining what it <em>pushes</em> to subscribed observers</li>
</ul>


<p>Not surprising, a computation of type <code>Future</code> can be transformed to a computation
of type <code>Observable</code> using this idea</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">future2observable</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">fz</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="nc">Future</span><span class="o">[</span><span class="kt">Z</span><span class="o">])</span><span class="k">:</span> <span class="kt">Observable</span><span class="o">[</span><span class="kt">Z</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="nc">Observable</span> <span class="o">{</span> <span class="n">sz</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">fz</span><span class="o">.</span><span class="n">register</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nc">Success</span><span class="o">(</span><span class="n">z</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="n">sz</span><span class="o">.</span><span class="n">onNext</span><span class="o">(</span><span class="n">z</span><span class="o">)</span>
</span><span class='line'>          <span class="n">sz</span><span class="o">.</span><span class="n">onCompleted</span><span class="o">()</span>
</span><span class='line'>        <span class="k">case</span> <span class="nc">Failure</span><span class="o">(</span><span class="n">t</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="n">sz</span><span class="o">.</span><span class="n">onError</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>future2observable</code> code makes use of a call by name parameter <code>fz</code>.</p>

<p>The example below illustrates how to use <code>future2observable</code> to transform a computation
of type <code>Try</code> to a computation of type <code>Observable</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">try2observable</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">tz</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="nc">Try</span><span class="o">[</span><span class="kt">Z</span><span class="o">])</span><span class="k">:</span> <span class="kt">Observable</span><span class="o">[</span><span class="kt">Z</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="n">future2observable</span><span class="o">(</span><span class="n">try2future</span><span class="o">(</span><span class="n">tz</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>try2future</code> function for computations of type <code>Try</code> could naturally be reused.</p>

<p>The example below illustrates how to use <code>try2observable</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">mkObservableTry</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">block</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="n">Z</span><span class="o">)</span><span class="k">:</span> <span class="kt">Observable</span><span class="o">[</span><span class="kt">Z</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="n">try2observable</span><span class="o">(</span><span class="n">mkTry</span><span class="o">{</span> <span class="n">block</span> <span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>mkTry</code> function for computations of type <code>Try</code> could naturally be reused.</p>

<p>The <code>mkObservableTry</code> code makes use of a <em>call by name</em> parameter <code>block</code>
which you can think of as code that
on the one hand, <em>can succeed</em> or <em>can fail</em> and,
on the other hand, <em>can take some time to be evaluated</em>.</p>

<p>There is one concept that we did not explain yet.
In the <a href="http://www.strongtyped.io/blog/2014/05/11/reactive-programming-try-future">previous blog post</a>
the type <code>Promise[Z]</code> is used in the implementation of many methods.
We also pounted out that it is a useful type on its own.
There exists a corresponding concept that is formalized as</p>

<ul>
<li><code>trait Subject[-Z] extends Observer[-Z] with Observable[+Z]</code></li>
</ul>


<p>It is possible, and often useful, to define observables directly in terms of
<em>various kinds of</em> subjects (<code>Subject</code> is a trait).
This blog post does not go into details.</p>

<p>How are computations of type <code>Future</code> described?</p>

<h2>Describing Computations of type <code>Observable</code></h2>

<p>Here are four computations of type <code>Observable</code> that are described using <code>future2observable</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:</span><span class="kt">paste</span>
</span><span class='line'><span class="c1">// Entering paste mode (ctrl-D to finish)</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryObservableFooBar05</span><span class="k">:</span> <span class="kt">Observable</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">future2observable</span><span class="o">(</span><span class="n">tryFutureFooBar05</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryObservableFooBar06</span><span class="k">:</span> <span class="kt">Observable</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">future2observable</span><span class="o">(</span><span class="n">tryFutureFooBar06</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryObservableFooBar07</span><span class="k">:</span> <span class="kt">Observable</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">future2observable</span><span class="o">(</span><span class="n">tryFutureFooBar07</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryObservableFooBar08</span><span class="k">:</span> <span class="kt">Observable</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">future2observable</span><span class="o">(</span><span class="n">tryFutureFooBar08</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Exiting paste mode, now interpreting.</span>
</span><span class='line'>
</span><span class='line'><span class="n">tryObservableFooBar05</span><span class="k">:</span> <span class="kt">rx.lang.scala.Observable</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">tryObservableFooBar06</span><span class="k">:</span> <span class="kt">rx.lang.scala.Observable</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">tryObservableFooBar07</span><span class="k">:</span> <span class="kt">rx.lang.scala.Observable</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">tryObservableFooBar08</span><span class="k">:</span> <span class="kt">rx.lang.scala.Observable</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The examples make use of computations of type <code>Future</code>
from <a href="http://www.strongtyped.io/blog/2014/05/11/reactive-programming-try-future">the previous blog post</a></p>

<p>How are computations of type <code>Observable</code> <em>executed</em> once they are described?</p>

<h2>Executing Computations of type <code>Observable</code></h2>

<p>For the purpose of this series of blog posts,
executing a computation of type <code>Observable</code> can be as simple as
subscribing an observer that prints the values pushed to it, or
prints the message of an error pushed to it, or
prints an indication that no more more values are pushed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">subscribe</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">oz</span><span class="k">:</span> <span class="kt">Observable</span><span class="o">[</span><span class="kt">Z</span><span class="o">])</span><span class="k">:</span> <span class="kt">Subscription</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">oz</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="k">new</span> <span class="nc">Observer</span><span class="o">[</span><span class="kt">Z</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">onNext</span><span class="o">(</span><span class="n">z</span><span class="k">:</span> <span class="kt">Z</span><span class="o">)</span> <span class="k">=</span> <span class="n">print</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;$z&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">onError</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span> <span class="k">=</span> <span class="n">print</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;${t.getMessage}&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">onCompleted</span><span class="o">()</span> <span class="k">=</span> <span class="n">print</span><span class="o">(</span><span class="s">&quot;completed&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have called the method <code>subscribe</code> instead of <code>execute</code>
because it returns a subscription that can be unsubscribed.</p>

<p>Below, the four computations of type <code>Observable</code> are executed using <code>subscribe</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">subscribe</span><span class="o">(</span><span class="n">tryObservableFooBar05</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;W</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">150</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">B54</span><span class="o">.</span><span class="n">F194</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">F194</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">F194</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">F194</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">F194</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span>
</span><span class='line'><span class="n">F194</span><span class="o">.</span><span class="n">F194</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">F194</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">F194</span><span class="o">.</span><span class="n">F194</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">fooOkbarOkcompletedW192</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">subscribe</span><span class="o">(</span><span class="n">tryObservableFooBar06</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;W</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">150</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">B54</span><span class="o">.</span><span class="n">F196</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">F196</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">F196</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">F196</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">F196</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span>
</span><span class='line'><span class="n">F196</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">F196</span><span class="o">.</span><span class="n">F196</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">F196</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">F196</span><span class="o">.</span><span class="n">fooKoW192</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">subscribe</span><span class="o">(</span><span class="n">tryObservableFooBar07</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;W</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">150</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">B196</span><span class="o">.</span><span class="n">F54</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">B196</span><span class="o">.</span><span class="n">F54</span><span class="o">.</span><span class="n">B196</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">B196</span><span class="o">.</span><span class="n">F54</span><span class="o">.</span><span class="n">B196</span><span class="o">.</span><span class="n">B196</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">F54</span><span class="o">.</span><span class="n">B196</span><span class="o">.</span><span class="n">B196</span><span class="o">.</span><span class="n">F54</span><span class="o">.</span><span class="n">B196</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span>
</span><span class='line'><span class="n">B196</span><span class="o">.</span><span class="n">F54</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">F54</span><span class="o">.</span><span class="n">F54</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">F54</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">F54</span><span class="o">.</span><span class="n">barKoW192</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">subscribe</span><span class="o">(</span><span class="n">tryObservableFooBar08</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;W</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">150</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">B54</span><span class="o">.</span><span class="n">F197</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">F197</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">F197</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">F197</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">F197</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">B54</span><span class="o">.</span>
</span><span class='line'><span class="n">F197</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">F197</span><span class="o">.</span><span class="n">F197</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">F197</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">F197</span><span class="o">.</span><span class="n">barKo</span> <span class="n">and</span> <span class="n">fooKoW192</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span><span class="n">W192</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Transforming futures, pushing one value,
to (a special  kind of) observables, potentially pushing many (zero or more) values,
is, of course, not the end of the story about observables.</p>

<h2>More Computations of type <code>Observable</code></h2>

<p>The simple observables defined below can serve as building blocks for defining more complex observables</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">zeroObservable</span><span class="o">()</span><span class="k">:</span> <span class="kt">Observable</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="n">mkObservable</span> <span class="o">{</span> <span class="n">sn</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">errorObservable</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">t</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span><span class="k">:</span> <span class="kt">Observable</span><span class="o">[</span><span class="kt">Z</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="nc">Observable</span> <span class="o">{</span> <span class="n">sz</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">sz</span><span class="o">.</span><span class="n">onError</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">nextObservable</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">z</span><span class="k">:</span> <span class="kt">Z</span><span class="o">)</span><span class="k">:</span> <span class="kt">Observable</span><span class="o">[</span><span class="kt">Z</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="nc">Observable</span> <span class="o">{</span> <span class="n">sz</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">sz</span><span class="o">.</span><span class="n">onNext</span><span class="o">(</span><span class="n">z</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">completedObservable</span><span class="o">()</span><span class="k">:</span> <span class="kt">Observable</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="nc">Observable</span> <span class="o">{</span> <span class="n">sn</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">sn</span><span class="o">.</span><span class="n">onCompleted</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">oneObservable</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">z</span><span class="k">:</span> <span class="kt">Z</span><span class="o">)</span><span class="k">:</span> <span class="kt">Observable</span><span class="o">[</span><span class="kt">Z</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="nc">Observable</span> <span class="o">{</span> <span class="n">sz</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">sz</span><span class="o">.</span><span class="n">onNext</span><span class="o">(</span><span class="n">z</span><span class="o">)</span>
</span><span class='line'>      <span class="n">sz</span><span class="o">.</span><span class="n">onCompleted</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The meaning of the simple observables above is almost trivial:
they push <em>nothing</em> resp. an <em>error</em> resp. a <em>value</em>, resp. a <em>completed marker</em> resp. a <em>value and a completed marker</em> to subscribed observers.</p>

<p>The following method shows how to define observables that push many values.
It uses a helper function <code>subscriber2observable</code> because directly subscribing
the subscriber <code>sz</code> below to the observable <code>oz</code> below does not work:
a new observer, wrapping the subscriber, needs to be subscribed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">subscriber2observer</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">sz</span><span class="k">:</span> <span class="kt">Subscriber</span><span class="o">[</span><span class="kt">Z</span><span class="o">])</span> <span class="k">=</span>
</span><span class='line'>    <span class="k">new</span> <span class="nc">Observer</span><span class="o">[</span><span class="kt">Z</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">onNext</span><span class="o">(</span><span class="n">z</span><span class="k">:</span> <span class="kt">Z</span><span class="o">)</span> <span class="k">=</span> <span class="n">sz</span><span class="o">.</span><span class="n">onNext</span><span class="o">(</span><span class="n">z</span><span class="o">)</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">onError</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span> <span class="k">=</span> <span class="n">sz</span><span class="o">.</span><span class="n">onError</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">onCompleted</span><span class="o">()</span> <span class="k">=</span> <span class="n">sz</span><span class="o">.</span><span class="n">onCompleted</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">class</span> <span class="nc">ObservableOps</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">oz</span><span class="k">:</span> <span class="kt">Observable</span><span class="o">[</span><span class="kt">Z</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">startingWith</span><span class="o">(</span><span class="n">zs</span><span class="k">:</span> <span class="kt">Z*</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>      <span class="nc">Observable</span><span class="o">[</span><span class="kt">Z</span><span class="o">]</span> <span class="o">{</span> <span class="n">sz</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">zs</span><span class="o">.</span><span class="n">foreach</span> <span class="o">{</span> <span class="n">z</span> <span class="k">=&gt;</span> <span class="n">sz</span><span class="o">.</span><span class="n">onNext</span><span class="o">(</span><span class="n">z</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>        <span class="n">oz</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="n">subscriber2observer</span><span class="o">(</span><span class="n">sz</span><span class="o">))</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>First all <code>zs</code> are pushed to subscribed observers
and after that the observable <code>oz</code> continues pushing
values to them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">subscribe</span><span class="o">(</span><span class="n">oneObservable</span><span class="o">(</span><span class="mi">4</span><span class="o">).</span><span class="n">startingWith</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">))</span>
</span><span class='line'><span class="mi">1234</span><span class="n">completed</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Computations of type <code>Observable</code> of the RxScala library</h2>

<p>There are various ways to define observables available in the RxScala library.</p>

<p>Below is an example, using <code>from</code>, that
can be used to transform any <em>iterable</em>, which is pull based,
to an <em>observable</em>, which is push based</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">lazy</span> <span class="k">val</span> <span class="n">oneTwoThreeFour</span> <span class="k">=</span> <span class="n">from</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">))</span>
</span><span class='line'><span class="n">oneTwoThreeFour</span><span class="k">:</span> <span class="kt">rx.lang.scala.Observable</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can subscribe to it (ignoring the subscription)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">subscribe</span><span class="o">(</span><span class="n">oneTwoThreeFour</span><span class="o">)</span> <span class="o">;</span> <span class="o">()</span> <span class="o">}</span>
</span><span class='line'><span class="mi">1234</span><span class="n">completed</span>
</span></code></pre></td></tr></table></div></figure>


<p>This transformation from iterables to observables is not as trivial
as it looks: at any moment subscribed observers should be able to
unsubscribe.</p>

<p>Below is an example, using <code>interval</code>, that defines
a <em>ticker</em>  that is ticking every <code>100</code> milliseconds.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">lazy</span> <span class="k">val</span> <span class="n">ticker</span> <span class="k">=</span> <span class="n">interval</span><span class="o">(</span><span class="mi">100</span> <span class="n">millis</span><span class="o">)</span>
</span><span class='line'><span class="n">ticker</span><span class="k">:</span> <span class="kt">rx.lang.scala.Observable</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can subscribe to it and unsubscribe from it when
you are not interested in receiving further ticks any more.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:</span><span class="kt">paste</span>
</span><span class='line'><span class="c1">// Entering paste mode (ctrl-D to finish)</span>
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'> <span class="k">val</span> <span class="n">subscription</span> <span class="k">=</span> <span class="n">subscribe</span><span class="o">(</span><span class="n">ticker</span><span class="o">)</span>
</span><span class='line'> <span class="nc">Thread</span><span class="o">.</span><span class="n">sleep</span><span class="o">(</span><span class="mi">600</span><span class="o">)</span>
</span><span class='line'> <span class="n">subscription</span><span class="o">.</span><span class="n">unsubscribe</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Exiting paste mode, now interpreting.</span>
</span><span class='line'>
</span><span class='line'><span class="mi">012345</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what about <code>bnd</code> and <code>and</code>?</p>

<h2><code>flatten</code> is your friend</h2>

<p>The story is somewhat different here and we do not go into all details.
For observables, the method <code>bnd</code> below which is defined in terms of the RxScala
library method <code>flatten</code>
(which, <em>non-deterministically</em>, <em>merges observables of observables</em>)
is all we need.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">bnd</span><span class="o">[</span><span class="kt">Y</span><span class="o">](</span><span class="n">z2oy</span><span class="k">:</span> <span class="kt">Z</span> <span class="o">=&gt;</span> <span class="nc">Observable</span><span class="o">[</span><span class="kt">Y</span><span class="o">])</span><span class="k">:</span> <span class="kt">Observable</span><span class="o">[</span><span class="kt">Y</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="nc">Observable</span><span class="o">[</span><span class="kt">Observable</span><span class="o">[</span><span class="kt">Y</span><span class="o">]]</span> <span class="o">{</span> <span class="n">ooy</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">oz</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="k">new</span> <span class="nc">Observer</span><span class="o">[</span><span class="kt">Z</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">onNext</span><span class="o">(</span><span class="n">z</span><span class="k">:</span> <span class="kt">Z</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>        <span class="n">ooy</span><span class="o">.</span><span class="n">onNext</span><span class="o">(</span><span class="n">z</span> <span class="n">bind</span> <span class="n">z2oy</span><span class="o">)</span>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">onError</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>        <span class="n">ooy</span><span class="o">.</span><span class="n">onError</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">onCompleted</span><span class="o">()</span> <span class="k">=</span>
</span><span class='line'>        <span class="n">ooy</span><span class="o">.</span><span class="n">onCompleted</span><span class="o">()</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'>  <span class="o">}</span> <span class="n">flatten</span>
</span></code></pre></td></tr></table></div></figure>


<p>To make things interesting from a merge point of view we define
the following verbose version of <code>interval</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">verboseInterval</span><span class="o">(</span><span class="n">t0</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>    <span class="n">interval</span><span class="o">(</span><span class="n">x</span><span class="o">*</span><span class="mi">100</span> <span class="n">millis</span><span class="o">).</span><span class="n">take</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">y</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">millis</span> <span class="k">=</span> <span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span> <span class="o">-</span> <span class="n">t0</span><span class="o">)</span> <span class="o">/</span> <span class="mf">1000.0</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="n">f</span><span class="s">&quot;at ${millis}%.3f interval($x) emits $y&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="n">nextObservable</span><span class="o">(</span><span class="n">y</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is an observable, this time defined as a <code>def</code>,
to take the current time into account every time it is executed,
that uses <code>bnd</code> to merge three intervals as they are pushed
to subscribed observers</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:</span><span class="kt">paste</span>
</span><span class='line'><span class="c1">// Entering paste mode (ctrl-D to finish)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">mergedIntervals</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>    <span class="n">from</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">))</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">x</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">verboseInterval</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">x</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">y</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">oneObservable</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Exiting paste mode, now interpreting.</span>
</span><span class='line'>
</span><span class='line'><span class="n">mergedIntervals</span><span class="k">:</span> <span class="o">(</span><span class="kt">t:</span> <span class="kt">Long</span><span class="o">)</span><span class="kt">rx.lang.scala.Observable</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is instructive to try to understand the output of executing the following computation</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:</span><span class="kt">paste</span>
</span><span class='line'><span class="c1">// Entering paste mode (ctrl-D to finish)</span>
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'> <span class="n">subscribe</span><span class="o">(</span><span class="n">mergedIntervals</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span><span class="o">))</span>
</span><span class='line'> <span class="nc">Thread</span><span class="o">.</span><span class="n">sleep</span><span class="o">(</span><span class="mi">3000</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Exiting paste mode, now interpreting.</span>
</span><span class='line'>
</span><span class='line'><span class="n">at</span> <span class="mf">0.102</span><span class="k">:</span><span class="kt">interval</span><span class="o">(</span><span class="err">1</span><span class="o">)</span> <span class="kt">emits</span> <span class="err">0</span>
</span><span class='line'><span class="kt">at</span> <span class="err">0</span><span class="kt">.</span><span class="err">202</span><span class="kt">:interval</span><span class="o">(</span><span class="err">2</span><span class="o">)</span> <span class="kt">emits</span> <span class="err">0</span>
</span><span class='line'><span class="kt">at</span> <span class="err">0</span><span class="kt">.</span><span class="err">202</span><span class="kt">:interval</span><span class="o">(</span><span class="err">1</span><span class="o">)</span> <span class="kt">emits</span> <span class="err">1</span>
</span><span class='line'><span class="kt">at</span> <span class="err">0</span><span class="kt">.</span><span class="err">302</span><span class="kt">:interval</span><span class="o">(</span><span class="err">3</span><span class="o">)</span> <span class="kt">emits</span> <span class="err">0</span>
</span><span class='line'><span class="kt">at</span> <span class="err">0</span><span class="kt">.</span><span class="err">402</span><span class="kt">:interval</span><span class="o">(</span><span class="err">2</span><span class="o">)</span> <span class="kt">emits</span> <span class="err">1</span>
</span><span class='line'><span class="kt">at</span> <span class="err">0</span><span class="kt">.</span><span class="err">602</span><span class="kt">:interval</span><span class="o">(</span><span class="err">3</span><span class="o">)</span> <span class="kt">emits</span> <span class="err">1</span>
</span></code></pre></td></tr></table></div></figure>


<h2>An example: <code>scanning</code></h2>

<p>We end with a common use case: <em>scanning observables</em>.
For example:
an observable that pushes <code>"1" "2" "3" "4" "5"</code>,
when scanned using <code>add</code>, a swapped, curried version of <code>+</code>, becomes
an observable that pushes <code>"1" "12" "123" "1234" "12345"</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'> <span class="k">def</span> <span class="n">scanning</span><span class="o">[</span><span class="kt">Y</span><span class="o">](</span><span class="n">y</span><span class="k">:</span> <span class="kt">Y</span><span class="o">)(</span><span class="n">z_2_y2y</span><span class="k">:</span> <span class="kt">Z</span> <span class="o">=&gt;</span> <span class="n">Y</span> <span class="k">=&gt;</span> <span class="n">Y</span><span class="o">)</span><span class="k">:</span> <span class="kt">Observable</span><span class="o">[</span><span class="kt">Y</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkObservable</span><span class="o">[</span><span class="kt">Y</span><span class="o">]</span> <span class="o">{</span> <span class="n">sz</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">accY</span> <span class="k">=</span> <span class="n">y</span>
</span><span class='line'>    <span class="n">oz</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="k">new</span> <span class="nc">Observer</span><span class="o">[</span><span class="kt">Z</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">onNext</span><span class="o">(</span><span class="n">z</span><span class="k">:</span> <span class="kt">Z</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">accY</span> <span class="k">=</span> <span class="n">z_2_y2y</span><span class="o">(</span><span class="n">z</span><span class="o">)(</span><span class="n">accY</span><span class="o">)</span> <span class="o">;</span> <span class="n">sz</span><span class="o">.</span><span class="n">onNext</span><span class="o">(</span><span class="n">accY</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">onError</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sz</span><span class="o">.</span><span class="n">onError</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">override</span> <span class="k">def</span> <span class="n">onCompleted</span><span class="o">()</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sz</span><span class="o">.</span><span class="n">onCompleted</span><span class="o">()</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We used a <code>var accY</code> as an accumulator. You may argue: how ugly!
Well, in a way, using a <code>var</code> as an <em>internal implementation detail</em> is not ugly at all.
Erik Meijer (the brain behind the Rx extensions of .NET, upon which RxJava
and RxScala are based) calls himself <em>&ldquo;both a functional thinker and an imperative hacker&rdquo;</em>.</p>

<p>Here is a typical <code>scanning</code> example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:</span><span class="kt">paste</span>
</span><span class='line'><span class="c1">// Entering paste mode (ctrl-D to finish)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">add</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)(</span><span class="n">t</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">t</span> <span class="o">+</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">scannedObservable</span> <span class="k">=</span>
</span><span class='line'> <span class="n">from</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">,</span> <span class="s">&quot;2&quot;</span><span class="o">,</span> <span class="s">&quot;3&quot;</span><span class="o">,</span> <span class="s">&quot;4&quot;</span><span class="o">,</span> <span class="s">&quot;5&quot;</span><span class="o">))</span>
</span><span class='line'>  <span class="o">.</span><span class="n">scanning</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">)(</span><span class="n">add</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Exiting paste mode, now interpreting.</span>
</span><span class='line'>
</span><span class='line'><span class="n">add</span><span class="k">:</span> <span class="o">(</span><span class="kt">s:</span> <span class="kt">String</span><span class="o">)(</span><span class="kt">t:</span> <span class="kt">String</span><span class="o">)</span><span class="kt">String</span>
</span><span class='line'><span class="n">scannedObservable</span><span class="k">:</span> <span class="kt">rx.lang.scala.Observable</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and here we run it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">subscribe</span><span class="o">(</span><span class="n">scannedObservable</span><span class="o">)</span> <span class="o">;</span> <span class="o">()</span> <span class="o">}</span>
</span><span class='line'><span class="mi">121321432154321</span><span class="n">completed</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reactive Programming: Try Versus Future]]></title>
    <link href="http://www.strongtyped.io/blog/2014/05/11/reactive-programming-try-future/"/>
    <updated>2014-05-11T06:21:00+02:00</updated>
    <id>http://www.strongtyped.io/blog/2014/05/11/reactive-programming-try-future</id>
    <content type="html"><![CDATA[<p>This is a first of two blog posts of about <em>Reactive Programming in Scala</em>.
The blog post about <a href="http://www.strongtyped.io/blog/2014/05/11/functional-programming-in-scala"><em>Functional Programming in Scala</em></a>
introduced <em>pure computations resulting in exactly one value</em>.
Reactive programming deals, in a functional way,
with two fundamental <em>impure</em> aspects of computations: <em>failure</em> and <em>latency</em>.
The first blog post covers reactive programs resulting in <em>one</em> value.
The second blog post covers Reactive Programs resulting in <em>many</em> (<em>zero or more</em>) values.</p>

<p><strong>Warning:</strong>
The types that are used in this blog post exist in the standard Scala library.
For didactical reasons this blog post sometimes defines extra types and extra methods for existing types.</p>

<!-- more -->


<h2>Failure</h2>

<p>In Java (and many other languages for that matter) failure is modeled using <em>exceptions</em>.
Java also added the distiction between <em>checked</em> and <em>unchecked</em> exceptions.</p>

<p>When asking Java programmers if they <em>like</em> checked exceptions, many of them say they <em>hate</em> them.
In a way this is strange because checked exceptions are part of the <em>contract</em> of your code,
and, when using them, the compiler <em>helps</em> you by telling you whether or not
your code <em>satisfies that contract</em>.
In practice, many Java programmers have the feeling that the compiler is <em>annoying</em>
them rather then helping them.</p>

<p>Why?</p>

<p>Well, because, when trying to satisfy the contract that comes with checked exceptions,
programmers are basically <em>left on their own</em>. As a consequence <code>try/catch</code> code propagates
all the way through their code, cluttering up the <em>essential part</em> of their code.
In a way, when using checked exceptions, <em>they end up in</em> <code>try/catch</code> <em>hell</em>.
Therefore many Java programmers <code>catch</code> checked exceptions and <code>throw</code> unchecked ones.</p>

<p>That makes the situation even worse since, by throwing unchecked exceptions,
programmers let failure <em>silently disappear at compile time</em>
until it <em>loudly re-appears at runtime</em>.</p>

<p>There must be a better way to deal with failure.</p>

<h2>Computations of type <code>Try</code></h2>

<p>The <code>Try</code> type represents a computation that may
either result in a successfully computed value
or result in a failure.
An instance of <code>Try[Z]</code> is
either an instance of <code>Success[Z]</code>
or an instance of <code>Failure[Z]</code>.</p>

<p>Code that makes use a value <code>tz</code> of type <code>Try[Z]</code>,
typically, makes use of a <code>match</code> on <code>tz</code>, which, you can think of as code that</p>

<ul>
<li>in a synchronous (blocking) way, <em>pulls</em> a value or a throwable out of <code>tz</code></li>
</ul>


<h2>Materializing failure using <code>mkTry</code></h2>

<p>A first step towards dealing with failure in a better way is to write, once and for all, code that
<em>materializes failure at compile time</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">mkTry</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">block</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="n">Z</span><span class="o">)</span><span class="k">:</span> <span class="kt">Try</span><span class="o">[</span><span class="kt">Z</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">Success</span> <span class="o">{</span> <span class="n">block</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">throwable</span><span class="k">:</span> <span class="kt">Throwable</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="nc">Failure</span><span class="o">(</span><span class="n">throwable</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>mkTry</code> code makes use of a <em>call by name</em> parameter <code>block</code>
which you can think of as code that <em>can succeed</em> or <em>can fail</em>.</p>

<p>The standard Scala library already has an <code>apply</code> method in the <code>Try</code> companion
object that is equivalent to <code>mkTry</code>. The definition of <code>mkTry</code> is given for
didactical reasons only.</p>

<p>How are computations of type <code>Try</code> <em>described</em>?</p>

<h2>Describing Computations of type <code>Try</code></h2>

<p>To make things interesting from a failure and latency
point of view, many example computations make use of
the functions <code>work</code> and <code>block</code> below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">work</span><span class="o">(</span><span class="n">c</span><span class="k">:</span> <span class="kt">Char</span><span class="o">,</span> <span class="n">l</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">10</span><span class="o">).</span><span class="n">foreach</span> <span class="o">{</span> <span class="k">_</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">print</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;${c}${Thread.currentThread().getId()}.&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="nc">Thread</span><span class="o">.</span><span class="n">sleep</span><span class="o">(</span><span class="n">l</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">block</span><span class="o">(</span><span class="n">string</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Boolean</span><span class="o">,</span> <span class="n">c</span><span class="k">:</span> <span class="kt">Char</span><span class="o">,</span> <span class="n">l</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">work</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">l</span><span class="o">)</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">b</span><span class="o">)</span> <span class="n">s</span><span class="s">&quot;${string}Ok&quot;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">Throwable</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;${string}Ko&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here are two computations of type <code>Try</code> that are described using <code>mkTry</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">lazy</span> <span class="k">val</span> <span class="n">okTryFoo</span> <span class="k">=</span> <span class="n">mkTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">okTryFoo</span><span class="k">:</span> <span class="kt">scala.util.Try</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">lazy</span> <span class="k">val</span> <span class="n">koTryFoo</span> <span class="k">=</span> <span class="n">mkTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">okTryFoo</span><span class="k">:</span> <span class="kt">scala.util.Try</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A <code>lazy val</code> is used to separate the description of the computation from its execution.</p>

<p>How are computations of type <code>Try</code> <em>executed</em> once they are described?</p>

<h2>Executing Computations of type <code>Try</code></h2>

<p>For the purpose of this series of blog posts,
executing a computation of type <code>Try</code> can be as simple as either printing the value
pulled out of a successful result or printing the message pulled out of an unsuccessful result</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">execute</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">tz</span><span class="k">:</span> <span class="kt">Try</span><span class="o">[</span><span class="kt">Z</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">tz</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Success</span><span class="o">(</span><span class="n">z</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">print</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;$z&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Failure</span><span class="o">(</span><span class="n">t</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">print</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;${t.getMessage}&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below, the two computations of type <code>Try</code> are executed using <code>execute</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">okTryFoo</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;M</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">fooOkM142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">okTryFoo</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;M</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">fooOkM142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">koTryFoo</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;M</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">fooKoM142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">koTryFoo</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;M</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">fooKoM142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, what does materialized failure bring you?</p>

<h2><code>bnd</code> is your guide</h2>

<p>Just as it is possible for computations of type <code>One</code> it is possible for computations of type <code>Try</code>
to define a method <code>bnd</code> that can be used to <em>compose computations</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">implicit</span> <span class="k">class</span> <span class="nc">TryOps</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">tz</span><span class="k">:</span> <span class="kt">Try</span><span class="o">[</span><span class="kt">Z</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">bnd</span><span class="o">[</span><span class="kt">Y</span><span class="o">](</span><span class="n">z2ty</span><span class="k">:</span> <span class="kt">Z</span> <span class="o">=&gt;</span> <span class="nc">Try</span><span class="o">[</span><span class="kt">Y</span><span class="o">])</span><span class="k">:</span> <span class="kt">Try</span><span class="o">[</span><span class="kt">Y</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>      <span class="n">tz</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nc">Success</span><span class="o">(</span><span class="n">z</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="n">z</span> <span class="n">bind</span> <span class="n">z2ty</span>
</span><span class='line'>        <span class="k">case</span> <span class="nc">Failure</span><span class="o">(</span><span class="n">t</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="nc">Failure</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>An important requirement for <code>z2ty</code> is that it <em>must not throw exceptions</em>.
Using <code>mkTry</code>, it is easy to fulfill this requirement.</p>

<p>With <code>bnd</code> in your toolbox, you are not on your own any more to deal with materialized failure.
Indeed, the method <code>bnd</code> is your trustworthy guide that</p>

<ul>
<li><em>leads you through the successful execution path</em></li>
<li><em>does the failure related boilerplate work for you</em></li>
</ul>


<h2>DSL for declaring computations of type <code>Try</code> (Part 1)</h2>

<p>By now we have defined <code>mkTry</code> and <code>bnd</code></p>

<ul>
<li>They constitute <em>a declarative DSL for describing computations</em> of type <code>Try</code></li>
</ul>


<p>We have also defined <code>execute</code></p>

<ul>
<li>It constitutes <em>an imperative DSL for executing computations</em> of type <code>Try</code></li>
</ul>


<p>This section contains some examples on how to make use of those DSL&rsquo;s.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:</span><span class="kt">paste</span>
</span><span class='line'><span class="c1">// Entering paste mode (ctrl-D to finish)</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryFooBar01</span><span class="k">:</span> <span class="kt">Try</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">s</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">mkTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">t</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">mkTry</span><span class="o">(</span><span class="n">add</span><span class="o">(</span><span class="n">s</span><span class="o">)(</span><span class="n">t</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryFooBar02</span><span class="k">:</span> <span class="kt">Try</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">s</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">mkTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">t</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">mkTry</span><span class="o">(</span><span class="n">add</span><span class="o">(</span><span class="n">s</span><span class="o">)(</span><span class="n">t</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryFooBar03</span><span class="k">:</span> <span class="kt">Try</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">s</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">mkTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">t</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">mkTry</span><span class="o">(</span><span class="n">add</span><span class="o">(</span><span class="n">s</span><span class="o">)(</span><span class="n">t</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryFooBar04</span><span class="k">:</span> <span class="kt">Try</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">s</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">mkTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">t</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">mkTry</span><span class="o">(</span><span class="n">add</span><span class="o">(</span><span class="n">s</span><span class="o">)(</span><span class="n">t</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Exiting paste mode, now interpreting.</span>
</span><span class='line'>
</span><span class='line'><span class="n">tryFooBar01</span><span class="k">:</span> <span class="kt">scala.util.Try</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">tryFooBar02</span><span class="k">:</span> <span class="kt">scala.util.Try</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">tryFooBar03</span><span class="k">:</span> <span class="kt">scala.util.Try</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">tryFooBar04</span><span class="k">:</span> <span class="kt">scala.util.Try</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now, so to speak, try to print <code>fooOkbarOk</code> in a synchronous way</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">tryFooBar01</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;M</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span>
</span><span class='line'><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">fooOkbarOkM142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">tryFooBar02</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;M</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span>
</span><span class='line'><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">barKoM142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">tryFooBar03</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;M</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">fooKoM142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">tryFooBar04</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;M</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">fooKoM142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now that failure is dealt with for you, you are perfectly happy, right?
Well, maybe not.
<code>bnd</code> deals with failure in a somewhat specific way using a <em>fail fast</em> strategy.
Maybe what you want is a <em>fail slow</em> strategy that <em>accumulates</em> information about what went wrong along the way.</p>

<p>This is where <code>and</code> comes in.</p>

<h2><code>and</code> may be a better guide</h2>

<p>Just as it is possible for computations of type <code>One</code> it is possible for computations of type <code>Try</code>
to define a method <code>and</code> that can be used to <em>compose computations</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="k">def</span> <span class="n">and</span><span class="o">[</span><span class="kt">Y</span><span class="o">](</span><span class="n">t_z2y</span><span class="k">:</span> <span class="kt">Try</span><span class="o">[</span><span class="kt">Z</span> <span class="k">=&gt;</span> <span class="kt">Y</span><span class="o">])</span><span class="k">:</span> <span class="kt">Try</span><span class="o">[</span><span class="kt">Y</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="o">(</span><span class="n">tz</span><span class="o">,</span> <span class="n">t_z2y</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="o">(</span><span class="nc">Success</span><span class="o">(</span><span class="n">z</span><span class="o">),</span> <span class="nc">Success</span><span class="o">(</span><span class="n">z2y</span><span class="o">))</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="nc">Try</span> <span class="o">{</span> <span class="n">z</span> <span class="n">bind</span> <span class="n">z2y</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="o">(</span><span class="nc">Success</span><span class="o">(</span><span class="k">_</span><span class="o">),</span> <span class="nc">Failure</span><span class="o">(</span><span class="n">t</span><span class="o">))</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="nc">Failure</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="o">(</span><span class="nc">Failure</span><span class="o">(</span><span class="n">t</span><span class="o">),</span> <span class="nc">Success</span><span class="o">(</span><span class="k">_</span><span class="o">))</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="nc">Failure</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="o">(</span><span class="nc">Failure</span><span class="o">(</span><span class="n">t1</span><span class="o">),</span> <span class="nc">Failure</span><span class="o">(</span><span class="n">t2</span><span class="o">))</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="nc">Failure</span><span class="o">(</span><span class="k">new</span> <span class="nc">Throwable</span><span class="o">(</span>
</span><span class='line'>          <span class="n">t1</span><span class="o">.</span><span class="n">getMessage</span> <span class="o">+</span>
</span><span class='line'>          <span class="s">&quot; and &quot;</span> <span class="o">+</span>
</span><span class='line'>          <span class="n">t2</span><span class="o">.</span><span class="n">getMessage</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of relying on the default implementation of <code>and</code>
(that would use a fail fast strategy), you can take advantage of
the possibility to define <code>and</code> in another way to let it use a fail slow strategy
and accumulate error messages. All this is possible since <code>and</code>
is more abstract as <code>bnd</code> and, as such, allows for more implementation flexibility.</p>

<p>By the way: it is absolutely not the case that this is the one and only way
to use a fail slow strategy and accumulate information about what went wrong.
It is better to make use of a more powerful type, like the <code>Validation</code> type of ScalaZ.
The point we want to make is that, when going for <code>and</code> as a guide,
you have more failure handling implementation flexibility for letting
<code>and</code> guide you along your way to a possible result.</p>

<h2>DSL for declaring computations of type <code>Try</code> (Part 2)</h2>

<p>By now we have defined <code>mkTry</code>, <code>bnd</code> and <code>and</code></p>

<ul>
<li>They constitute <em>a declarative DSL for describing computations</em> of type <code>Try</code></li>
</ul>


<p>We have also defined <code>execute</code></p>

<ul>
<li>It constitutes <em>an imperative DSL for executing computations</em> of type <code>Try</code></li>
</ul>


<p>This section contains some examples on how to make use of those DSL&rsquo;s.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryFooBar05</span><span class="k">:</span> <span class="kt">Try</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mkTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mkTry</span><span class="o">(</span><span class="n">add</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryFooBar06</span><span class="k">:</span> <span class="kt">Try</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mkTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mkTry</span><span class="o">(</span><span class="n">add</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryFooBar07</span><span class="k">:</span> <span class="kt">Try</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mkTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mkTry</span><span class="o">(</span><span class="n">add</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryFooBar08</span><span class="k">:</span> <span class="kt">Try</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mkTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mkTry</span><span class="o">(</span><span class="n">add</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Exiting paste mode, now interpreting.</span>
</span><span class='line'>
</span><span class='line'><span class="n">tryFooBar05</span><span class="k">:</span> <span class="kt">scala.util.Try</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">tryFooBar06</span><span class="k">:</span> <span class="kt">scala.util.Try</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">tryFooBar07</span><span class="k">:</span> <span class="kt">scala.util.Try</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">tryFooBar08</span><span class="k">:</span> <span class="kt">scala.util.Try</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now, so to speak, try to print <code>fooOkbarOk</code> in a synchronous way</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">tryFooBar05</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;M</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span>
</span><span class='line'><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">fooOkbarOkM142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">tryFooBar06</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;M</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span>
</span><span class='line'><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">fooKoM142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">tryFooBar07</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;M</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span>
</span><span class='line'><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">barKoM142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">tryFooBar08</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;M</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">B142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span>
</span><span class='line'><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">F142</span><span class="o">.</span><span class="n">barKo</span> <span class="n">and</span> <span class="n">fooKoM142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>So far so good as far as <em>failure</em> is concerned. But what about <em>latency</em>?
All code we have shown so far uses <em>synchronous, blocking</em> computations.</p>

<h2>Latency</h2>

<p>You all know that making use of <em>synchronous, blocking</em> computations
is not the way to deal with latency.
In Java (and many other languages for that matter) <em>asynchronous, non-blocking</em> computations
are used instead to deal with latency.
Asynchronous computations are often modeled using <em>callbacks</em>.</p>

<p>When asking programmers if they <em>like</em> callbacks, many of them say they <em>hate</em> them.</p>

<p>Why?</p>

<p>Well, because, when trying to deal with latency using callbacks,
programmers are basically <em>left on their own</em>.
In a way, when using callbacks, <em>they end up in callback hell</em>.</p>

<p>There must be a better way to deal with latency.</p>

<h2>Computations of type <code>Future</code></h2>

<p>A value of type <code>Try[Z]</code> that is defined as a <code>def</code>
is essentially the same as a value of type <code>Unit =&gt; Try[Z]</code>.
The <em>dual</em> of such a value, obtained by reversing the arrow <code>=&gt;</code>,
is a value of type <code>Try[Z] =&gt; Unit</code>. This dual is formalized by the
following type definition</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">type</span> <span class="kt">Callback</span><span class="o">[</span><span class="kt">-Z</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Try</span><span class="o">[</span><span class="kt">Z</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="nc">Unit</span>
</span></code></pre></td></tr></table></div></figure>


<p>In a way (as illustrated in the following section) a <code>Future[Z]</code> value is the <em>dual</em> of a <code>Callback[Z]</code> value,
and, as such, the <em>bi-dual</em> of a <code>Try[Z]</code> value.</p>

<p>More precisely, in a way, <code>Future[Z]</code> is the same as <code>Callback[Z] =&gt; Unit</code>,
which is the same as <code>(Try[Z] =&gt; Unit) =&gt; Unit</code>.</p>

<p>This <em>bi-duality</em> turns out to transform synchronous <code>Try</code> computations
into asynchronous <code>Future</code> computations.</p>

<h2>Materializing (failure and) latency using <code>mkFuture</code></h2>

<p>A first step towards dealing with (failure and) latency is to write,
once and for all, code that <em>materializes (failure and) latency at compile time</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">mkFuture</span><span class="o">[</span><span class="kt">Z</span><span class="o">]</span>
</span><span class='line'>    <span class="o">(</span><span class="n">cz2u</span><span class="k">:</span> <span class="kt">Callback</span><span class="o">[</span><span class="kt">Z</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span>
</span><span class='line'>    <span class="o">(</span><span class="k">implicit</span> <span class="n">executionContext</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span>
</span><span class='line'>    <span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Z</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">pz</span> <span class="k">=</span> <span class="nc">Promise</span><span class="o">[</span><span class="kt">Z</span><span class="o">]()</span>
</span><span class='line'>    <span class="n">executionContext</span><span class="o">.</span><span class="n">prepare</span><span class="o">.</span><span class="n">execute</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">def</span> <span class="n">run</span> <span class="o">{</span> <span class="o">{</span> <span class="o">(</span><span class="n">tz</span><span class="k">:</span> <span class="kt">Try</span><span class="o">[</span><span class="kt">Z</span><span class="o">])</span> <span class="k">=&gt;</span> <span class="n">pz</span><span class="o">.</span><span class="n">complete</span><span class="o">(</span><span class="n">tz</span><span class="o">)</span> <span class="o">;</span> <span class="o">()</span> <span class="o">}</span> <span class="n">bind</span> <span class="n">cz2u</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'>    <span class="n">pz</span><span class="o">.</span><span class="n">future</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above uses the <code>Promise[Z]</code> class in its implementation.</p>

<p>You do not need to fully understand the <em>definition</em> of <code>mkFuture</code>.
Think of it as the <em>dual</em> of <em>fulfilling a promise</em> in a separate thead,
and returning that promise as a future.</p>

<p>In a way a <code>Promise[Z]</code> is both a <code>Callback[-Z]</code>,
since it has a method <code>complete</code> that has a parameter of type <code>Try[Z]</code>,
and a <code>Future[+Z]</code>,
since it has a variable <code>future</code> of type <code>Future[Z]</code>.</p>

<p>A promise is something that</p>

<ul>
<li>can be fulfilled (written) only once, in a thread safe way</li>
<li>can be pushed (and read) many times.</li>
</ul>


<p>It is possible, and often useful, to define futures directly in terms of promises.
This blog post does not go into details.</p>

<p>This definition of computations in terms of <code>mkFuture</code> is, in a way,
more complex than needed. For the moment, we are dealing
with reactive computations with <em>one</em> value.
Reactive computations with <em>many</em> values will be defined
in the next blog post a in similar way.
We want to emphasize this analogy.</p>

<p>When considering <code>mkFuture</code> as the <em>only</em> way to
make a future, in a way, <code>Future[Z]</code> becomes the same as <code>Callback[Z] =&gt; Unit</code>.</p>

<p>A callback can be <em>registered</em> to a future as shown below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">implicit</span> <span class="k">class</span> <span class="nc">FutureOps</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">fz</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Z</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">register</span><span class="o">(</span><span class="n">callback</span><span class="k">:</span> <span class="kt">Callback</span><span class="o">[</span><span class="kt">Z</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">fz</span><span class="o">.</span><span class="n">onComplete</span> <span class="o">{</span> <span class="n">tz</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">callback</span><span class="o">(</span><span class="n">tz</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The standard Scala library already has an <code>onComplete</code> method in the <code>Future</code> class
that is equivalent to <code>register</code>. The definition of <code>register</code> is given for didactical reasons only.</p>

<p>It is important that you understand the <em>usage</em> of <code>mkFuture</code></p>

<ul>
<li>you can make a future by defining what it <em>pushes</em> to registered callbacks</li>
</ul>


<p>Not surprising, a computation of type <code>Try</code> can be transformed to a computation
of type <code>Future</code> using this idea</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">try2future</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">tz</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="nc">Try</span><span class="o">[</span><span class="kt">Z</span><span class="o">])</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Z</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="n">mkFuture</span> <span class="o">{</span> <span class="n">cz</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">cz</span><span class="o">(</span><span class="n">tz</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>try2future</code> code makes use of a <em>call by name</em> parameter <code>tz</code>.</p>

<p>The example below illustrates how to use <code>try2future</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">mkFutureTry</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">block</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="n">Z</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Z</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="n">try2future</span><span class="o">(</span><span class="n">mkTry</span> <span class="o">{</span> <span class="n">block</span> <span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>mkTry</code> function for computations of type <code>Try</code> could naturally be reused.</p>

<p>The <code>mkFutureTry</code> code makes use of a <em>call by name</em> parameter <code>block</code>
which you can think of as code that
on the one hand, <em>can succeed</em> or <em>can fail</em> and,
on the other hand, <em>can take some time to be evaluated</em>.</p>

<p>How are computations of type <code>Future</code> described?</p>

<h2>Describing Computations of type <code>Future</code></h2>

<p>Here are two computations of type <code>Future</code> that are described using <code>mkFutureTry</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">lazy</span> <span class="k">val</span> <span class="n">okFutureTryFoo</span> <span class="k">=</span> <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">okFutureTryFoo</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">lazy</span> <span class="k">val</span> <span class="n">koFutureTryFoo</span> <span class="k">=</span> <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">koFutureTryFoo</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>How are computations of type <code>Future</code> <em>executed</em> once they are described?</p>

<h2>Executing Computations of type <code>Future</code></h2>

<p>For the purpose of this series of blog posts,
executing a computation of type <code>Future</code> can be as simple as registering a callback
that either prints the value of a successful result pushed to it or prints the message of an unsuccessful result
pushed to it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'> <span class="k">def</span> <span class="n">execute</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">fz</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Z</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span>
</span><span class='line'>   <span class="n">fz</span><span class="o">.</span><span class="n">register</span> <span class="o">{</span> <span class="n">tz</span> <span class="k">=&gt;</span>
</span><span class='line'>     <span class="n">execute</span><span class="o">(</span><span class="n">tz</span><span class="o">)</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>execute</code> function for computations of type <code>Try</code> could naturally be reused.</p>

<p>Below, the two computations of type <code>Future</code> are executed using <code>execute</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">okFutureTryFoo</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;M</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">120</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">F121</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F121</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F121</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F121</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F121</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F121</span><span class="o">.</span><span class="n">F121</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F121</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F121</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">F121</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">fooOkM142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">okFutureTryFoo</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;M</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">120</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">M142</span><span class="o">.</span><span class="n">fooOkM142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">koFutureTryFoo</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;M</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">120</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">M142</span><span class="o">.</span><span class="n">B121</span><span class="o">.</span><span class="n">B121</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">B121</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">B121</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">B121</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">B121</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">B121</span><span class="o">.</span><span class="n">B121</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">B121</span><span class="o">.</span><span class="n">M142</span>
</span><span class='line'><span class="o">.</span><span class="n">B121</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">fooKoM142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">koFutureTryFoo</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;M</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">120</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">M142</span><span class="o">.</span><span class="n">fooKoM142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, what does materialized (failure and) latency bring you?</p>

<h2><code>bnd</code> is your guide</h2>

<p>Just as it is possible for computations of type <code>Try</code> it is possible for computations of type <code>Future</code> to define a method <code>bnd</code> that can be used to <em>compose computations</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="k">def</span> <span class="n">bnd</span><span class="o">[</span><span class="kt">Y</span><span class="o">](</span><span class="n">z2fy</span><span class="k">:</span> <span class="kt">Z</span> <span class="o">=&gt;</span> <span class="nc">Future</span><span class="o">[</span><span class="kt">Y</span><span class="o">])</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Y</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">py</span> <span class="k">=</span> <span class="nc">Promise</span><span class="o">[</span><span class="kt">Y</span><span class="o">]()</span>
</span><span class='line'>  <span class="n">fz</span><span class="o">.</span><span class="n">register</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Success</span><span class="o">(</span><span class="n">z</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="o">(</span><span class="n">z</span> <span class="n">bind</span> <span class="n">z2fy</span><span class="o">).</span><span class="n">register</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nc">Success</span><span class="o">(</span><span class="n">y</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">py</span><span class="o">.</span><span class="n">success</span><span class="o">(</span><span class="n">y</span><span class="o">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="nc">Failure</span><span class="o">(</span><span class="n">t</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">py</span><span class="o">.</span><span class="n">failure</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Failure</span><span class="o">(</span><span class="n">t</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">py</span><span class="o">.</span><span class="n">failure</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">py</span><span class="o">.</span><span class="n">future</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>An important requirement for <code>z2fy</code> is that it must not throw exceptions. Using <code>mkFutureTry</code>, it is easy to fulfill this requirement.</p>

<p>With <code>bnd</code> in your toolbox, you are not on your own any more to deal with materialized (failure and) latency. Indeed, the method <code>bnd</code> is your trustworthy guide that</p>

<ul>
<li><em>leads you through the successful execution path</em></li>
<li><em>does the (failure and) latency related boilerplate work for you</em></li>
</ul>


<h2>DSL for declaring computations of type <code>Future</code> (Part 1)</h2>

<p>By now we have defined <code>mkFutureTry</code> and <code>bnd</code></p>

<ul>
<li>They constitute <em>a declarative DSL for describing computations</em> of type <code>Future</code></li>
</ul>


<p>We have also defined <code>execute</code></p>

<ul>
<li>It constitutes <em>an imperative DSL for executing computations</em> of type <code>Future</code></li>
</ul>


<p>This section contains some examples on how to make use of those DSL&rsquo;s.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:</span><span class="kt">paste</span>
</span><span class='line'><span class="c1">// Entering paste mode (ctrl-D to finish)</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryFutureFooBar01</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">s</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">t</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">mkFutureTry</span><span class="o">(</span><span class="n">add</span><span class="o">(</span><span class="n">s</span><span class="o">)(</span><span class="n">t</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryFutureFooBar02</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">s</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">t</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">mkFutureTry</span><span class="o">(</span><span class="n">add</span><span class="o">(</span><span class="n">s</span><span class="o">)(</span><span class="n">t</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryFutureFooBar03</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">s</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">t</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">mkFutureTry</span><span class="o">(</span><span class="n">add</span><span class="o">(</span><span class="n">s</span><span class="o">)(</span><span class="n">t</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryFutureFooBar04</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">s</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">t</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">mkFutureTry</span><span class="o">(</span><span class="n">add</span><span class="o">(</span><span class="n">s</span><span class="o">)(</span><span class="n">t</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Exiting paste mode, now interpreting.</span>
</span><span class='line'>
</span><span class='line'><span class="n">tryFutureFooBar01</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">tryFutureFooBar02</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">tryFutureFooBar03</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">tryFutureFooBar04</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now, so to speak, try to print <code>fooOkbarOk</code> in an asynchronous way</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">tryFutureFooBar01</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;M</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">300</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">F149</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F149</span><span class="o">.</span><span class="n">F149</span><span class="o">.</span><span class="n">F149</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F149</span><span class="o">.</span><span class="n">F149</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F149</span><span class="o">.</span><span class="n">F149</span><span class="o">.</span><span class="n">F149</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F149</span><span class="o">.</span><span class="n">B151</span><span class="o">.</span><span class="n">B151</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">B151</span><span class="o">.</span><span class="n">B151</span><span class="o">.</span><span class="n">B151</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">B151</span><span class="o">.</span><span class="n">B151</span><span class="o">.</span><span class="n">B151</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">B151</span><span class="o">.</span><span class="n">B151</span><span class="o">.</span><span class="n">fooOkbarOkM142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">tryFutureFooBar02</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;M</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">300</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">F152</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F152</span><span class="o">.</span><span class="n">F152</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F152</span><span class="o">.</span><span class="n">F152</span><span class="o">.</span><span class="n">F152</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F152</span><span class="o">.</span><span class="n">F152</span><span class="o">.</span><span class="n">F152</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F152</span><span class="o">.</span><span class="n">B151</span><span class="o">.</span><span class="n">B151</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">B151</span><span class="o">.</span><span class="n">B151</span><span class="o">.</span><span class="n">B151</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">B151</span><span class="o">.</span><span class="n">B151</span><span class="o">.</span><span class="n">B151</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">B151</span><span class="o">.</span><span class="n">B151</span><span class="o">.</span><span class="n">barKoM142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">tryFutureFooBar03</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;M</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">300</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">F151</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F151</span><span class="o">.</span><span class="n">F151</span><span class="o">.</span><span class="n">F151</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F151</span><span class="o">.</span><span class="n">F151</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F151</span><span class="o">.</span><span class="n">F151</span><span class="o">.</span><span class="n">F151</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F151</span><span class="o">.</span><span class="n">fooKoM142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">tryFutureFooBar04</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;M</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">300</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">F151</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F151</span><span class="o">.</span><span class="n">F151</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F151</span><span class="o">.</span><span class="n">F151</span><span class="o">.</span><span class="n">F151</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F151</span><span class="o">.</span><span class="n">F151</span><span class="o">.</span><span class="n">F151</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">F151</span><span class="o">.</span><span class="n">fooKoM142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span><span class='line'><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span><span class="n">M142</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now that latency is also dealt with for you, you are perfectly happy, right?
Well, maybe not.
<code>bnd</code> deals with latency in a somewhat specific (not to say sub-optimal) way using <em>sequential</em> composition. Maybe what you want is a <em>parallel</em> composition.</p>

<h2><code>and</code> may be a better guide</h2>

<p>Just as it is possible for computations of type <code>Try</code> it is possible for computations of type <code>Future</code>
to define a method <code>and</code> that can be used to <em>compose computations</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">and</span><span class="o">[</span><span class="kt">Y</span><span class="o">](</span><span class="n">f_z2y</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Z</span> <span class="k">=&gt;</span> <span class="kt">Y</span><span class="o">])</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Y</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">py</span> <span class="k">=</span> <span class="nc">Promise</span><span class="o">[</span><span class="kt">Y</span><span class="o">]()</span>
</span><span class='line'>  <span class="n">fz</span><span class="o">.</span><span class="n">register</span> <span class="o">{</span> <span class="n">tz</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">f_z2y</span><span class="o">.</span><span class="n">register</span> <span class="o">{</span> <span class="n">t_z2y</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">py</span><span class="o">.</span><span class="n">complete</span><span class="o">(</span><span class="n">tz</span> <span class="n">and</span> <span class="n">t_z2y</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">py</span><span class="o">.</span><span class="n">future</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>and</code> method for computations of type <code>Try</code> could naturally be reused.</p>

<p>Instead of relying on the default implementation of <code>and</code>
(that would use sequential composition), you can take advantage of
the possibility to define <code>and</code> in another way to let it use parallel composition
All this is possible since <code>and</code>
is more abstract as <code>bnd</code> and, as such, allows for more implementation flexibility.</p>

<p>The point we want to make is that, when going for <code>and</code> as a guide,
you have more latency handling implementation flexibility for letting
<code>and</code> guide you along your way to a possible result.</p>

<h2>DSL for declaring computations of type <code>Try</code> (Part 2)</h2>

<p>By now we have defined <code>mkFutureTry</code>, <code>bnd</code> and <code>and</code></p>

<ul>
<li>They constitute <em>a declarative DSL for describing computations</em> of type <code>Try</code></li>
</ul>


<p>We have also defined <code>execute</code></p>

<ul>
<li>It constitutes <em>an imperative DSL for executing computations</em> of type <code>Try</code></li>
</ul>


<p>This section contains some examples on how to make use of those DSL&rsquo;s.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Entering paste mode (ctrl-D to finish)</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryFutureFooBar05</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">50</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mkFutureTry</span><span class="o">(</span><span class="n">add</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryFutureFooBar06</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">50</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mkFutureTry</span><span class="o">(</span><span class="n">add</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryFutureFooBar07</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">50</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mkFutureTry</span><span class="o">(</span><span class="n">add</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryFutureFooBar08</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">50</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mkFutureTry</span><span class="o">(</span><span class="n">add</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Exiting paste mode, now interpreting.</span>
</span><span class='line'>
</span><span class='line'><span class="n">tryFutureFooBar05</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">tryFutureFooBar06</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">tryFutureFooBar07</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">tryFutureFooBar08</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now, so to speak, try to print <code>fooOkbarOk</code> in an asynchronous way</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">tryFutureFooBar05</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;W</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">150</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">B149</span><span class="o">.</span><span class="n">F154</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B149</span><span class="o">.</span><span class="n">B149</span><span class="o">.</span><span class="n">F154</span><span class="o">.</span><span class="n">B149</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F154</span><span class="o">.</span><span class="n">B149</span><span class="o">.</span><span class="n">B149</span><span class="o">.</span><span class="n">F154</span><span class="o">.</span><span class="n">B149</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B149</span><span class="o">.</span><span class="n">F154</span><span class="o">.</span><span class="n">B149</span><span class="o">.</span>
</span><span class='line'><span class="n">W142</span><span class="o">.</span><span class="n">B149</span><span class="o">.</span><span class="n">F154</span><span class="o">.</span><span class="n">F154</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F154</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F154</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F154</span><span class="o">.</span><span class="n">fooOkbarOkW142</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">tryFutureFooBar06</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;W</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">150</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">B154</span><span class="o">.</span><span class="n">F155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B154</span><span class="o">.</span><span class="n">B154</span><span class="o">.</span><span class="n">F155</span><span class="o">.</span><span class="n">B154</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F155</span><span class="o">.</span><span class="n">B154</span><span class="o">.</span><span class="n">B154</span><span class="o">.</span><span class="n">F155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B154</span><span class="o">.</span><span class="n">B154</span><span class="o">.</span><span class="n">F155</span><span class="o">.</span><span class="n">B154</span><span class="o">.</span>
</span><span class='line'><span class="n">W142</span><span class="o">.</span><span class="n">B154</span><span class="o">.</span><span class="n">F155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F155</span><span class="o">.</span><span class="n">F155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F155</span><span class="o">.</span><span class="n">fooKoW142</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">tryFutureFooBar07</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;W</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">150</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">B154</span><span class="o">.</span><span class="n">F149</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B154</span><span class="o">.</span><span class="n">B154</span><span class="o">.</span><span class="n">F149</span><span class="o">.</span><span class="n">B154</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F149</span><span class="o">.</span><span class="n">B154</span><span class="o">.</span><span class="n">B154</span><span class="o">.</span><span class="n">F149</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B154</span><span class="o">.</span><span class="n">B154</span><span class="o">.</span><span class="n">F149</span><span class="o">.</span><span class="n">B154</span>
</span><span class='line'><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B154</span><span class="o">.</span><span class="n">F149</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F149</span><span class="o">.</span><span class="n">F149</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F149</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F149</span><span class="o">.</span><span class="n">barKoW142</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">tryFutureFooBar08</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;W</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">150</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">B149</span><span class="o">.</span><span class="n">F155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B149</span><span class="o">.</span><span class="n">B149</span><span class="o">.</span><span class="n">F155</span><span class="o">.</span><span class="n">B149</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F155</span><span class="o">.</span><span class="n">B149</span><span class="o">.</span><span class="n">B149</span><span class="o">.</span><span class="n">F155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B149</span><span class="o">.</span><span class="n">B149</span><span class="o">.</span><span class="n">F155</span><span class="o">.</span><span class="n">B149</span><span class="o">.</span>
</span><span class='line'><span class="n">W142</span><span class="o">.</span><span class="n">B149</span><span class="o">.</span><span class="n">F155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F155</span><span class="o">.</span><span class="n">F155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F155</span><span class="o">.</span><span class="n">barKo</span> <span class="n">and</span> <span class="n">fooKoW142</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the examples above,
the <code>block</code> using <code>"bar"</code> is executed faster than
the <code>block</code> using <code>"foo"</code>.
So what about the opposite?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Entering paste mode (ctrl-D to finish)</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryFutureFooBar09</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">50</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mkFutureTry</span><span class="o">(</span><span class="n">add</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryFutureFooBar10</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">50</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mkFutureTry</span><span class="o">(</span><span class="n">add</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryFutureFooBar11</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">50</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mkFutureTry</span><span class="o">(</span><span class="n">add</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">tryFutureFooBar12</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;B</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mkFutureTry</span> <span class="o">{</span> <span class="n">block</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="-Symbol">&#39;F</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">50</span><span class="o">)</span> <span class="o">}</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mkFutureTry</span><span class="o">(</span><span class="n">add</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Exiting paste mode, now interpreting.</span>
</span><span class='line'>
</span><span class='line'><span class="n">tryFutureFooBar09</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">tryFutureFooBar10</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">tryFutureFooBar11</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">tryFutureFooBar12</span><span class="k">:</span> <span class="kt">scala.concurrent.Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now, again, so to speak, try to print <code>fooOkbarOk</code> in an asynchronous way</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">tryFutureFooBar09</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;W</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">150</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">B155</span><span class="o">.</span><span class="n">F157</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F157</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">F157</span><span class="o">.</span><span class="n">F157</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">F157</span><span class="o">.</span><span class="n">F157</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F157</span><span class="o">.</span><span class="n">F157</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">F157</span><span class="o">.</span>
</span><span class='line'><span class="n">W142</span><span class="o">.</span><span class="n">F157</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">fooOkbarOkW142</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">tryFutureFooBar10</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;W</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">150</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">B155</span><span class="o">.</span><span class="n">F159</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F159</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">F159</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F159</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">F159</span><span class="o">.</span><span class="n">F159</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F159</span><span class="o">.</span><span class="n">F159</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">F159</span><span class="o">.</span>
</span><span class='line'><span class="n">W142</span><span class="o">.</span><span class="n">F159</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">fooKoW142</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">tryFutureFooBar11</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;W</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">150</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">B155</span><span class="o">.</span><span class="n">F158</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F158</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">F158</span><span class="o">.</span><span class="n">F158</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">F158</span><span class="o">.</span><span class="n">F158</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F158</span><span class="o">.</span><span class="n">F158</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">F158</span><span class="o">.</span>
</span><span class='line'><span class="n">W142</span><span class="o">.</span><span class="n">F158</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">barKoW142</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">execute</span><span class="o">(</span><span class="n">tryFutureFooBar12</span><span class="o">)</span> <span class="o">;</span> <span class="n">work</span><span class="o">(</span><span class="-Symbol">&#39;W</span><span class="err">&#39;</span><span class="o">,</span> <span class="mi">150</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="n">B155</span><span class="o">.</span><span class="n">F158</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F158</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">F158</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F158</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">F158</span><span class="o">.</span><span class="n">F158</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">F158</span><span class="o">.</span><span class="n">F158</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">F158</span><span class="o">.</span>
</span><span class='line'><span class="n">W142</span><span class="o">.</span><span class="n">F158</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">B155</span><span class="o">.</span><span class="n">barKo</span> <span class="n">and</span> <span class="n">fooKoW142</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span><span class="n">W142</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the examples above,
the <code>block</code> using <code>"foo"</code> is executed faster than
the <code>block</code> using <code>"bar"</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Programming in Scala]]></title>
    <link href="http://www.strongtyped.io/blog/2014/05/11/functional-programming-in-scala/"/>
    <updated>2014-05-11T06:21:00+02:00</updated>
    <id>http://www.strongtyped.io/blog/2014/05/11/functional-programming-in-scala</id>
    <content type="html"><![CDATA[<p>This blog post is the first one of a series of blog posts about <em>Functional Programming in Scala</em>.
It is also a teaser for series of blog posts of about <em>Reactive Programming in Scala</em>.</p>

<p><strong>Warning:</strong>
Functional Programming and Reactive Programming are profound topics.
Hopefully, you will be rewarded for your effort to read the blog posts.</p>

<!-- more -->


<h2>Binding</h2>

<p>You are, most probably, used to think of</p>

<ul>
<li><em>functions</em> in terms of <em>applying</em> them to <em>values</em></li>
</ul>


<p>but, of course, you can also think of</p>

<ul>
<li><em>values</em> in terms of <em>binding</em> them to <em>functions</em></li>
</ul>


<p>The method <code>bind</code> below, defined in terms of <code>apply</code>, formalizes binding</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">implicit</span> <span class="k">class</span> <span class="nc">AnyOps</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">z</span><span class="k">:</span> <span class="kt">Z</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">bind</span><span class="o">[</span><span class="kt">Y</span><span class="o">](</span><span class="n">z2y</span><span class="k">:</span> <span class="kt">Z</span> <span class="o">=&gt;</span> <span class="n">Y</span><span class="o">)</span><span class="k">:</span> <span class="kt">Y</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">z2y</span> <span class="n">apply</span> <span class="n">z</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Strictly speaking it is not necessary at all to introduce binding in Scala,
but, sometimes, <code>bind</code> is more convenient to use than <code>apply</code>, as illustrated below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="mi">1</span> <span class="n">bind</span> <span class="o">{</span> <span class="n">z</span> <span class="k">=&gt;</span> <span class="n">z</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">}</span> <span class="n">bind</span> <span class="o">{</span> <span class="n">z</span> <span class="k">=&gt;</span> <span class="n">z</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">}</span>
</span><span class='line'><span class="n">res0</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="o">{</span> <span class="o">(</span><span class="n">z</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">z</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">}</span> <span class="n">apply</span> <span class="o">({</span> <span class="o">(</span><span class="n">z</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">z</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">}</span> <span class="n">apply</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="n">res1</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>The method <code>bind</code> naturally associates to the <em>left</em>, while
the method <code>apply</code> associates to the <em>right</em>,
requiring the usage of <em>parantheses</em>.</p></li>
<li><p>The Scala type inferencer naturally infers the type of expressions using <code>bind</code>, while
it does not infer the type of expressions using <code>apply</code>,
requiring the usage of <em>type annotations</em>.</p></li>
</ul>


<h2>Functional Programming</h2>

<p>Here is some quote about Functional Programming</p>

<p><em>Functional Programming strictly separates</em></p>

<ul>
<li><em>the declarative description of computations</em></li>
<li><em>the imperative execution of computations</em></li>
</ul>


<p>So, what are the computations in this quote all about?</p>

<h2>Computations of type <code>One</code></h2>

<p>Let&rsquo;s get started with <em>pure computations</em> that, when <em>executed</em>, result in <em>exactly one value</em>
as defined by the following <code>case class</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">case</span> <span class="k">class</span> <span class="nc">One</span><span class="o">[</span><span class="kt">+Z</span><span class="o">](</span><span class="n">z</span><span class="k">:</span> <span class="kt">Z</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Computations resulting in exactly one value are also referred to as computations of type <code>One</code>.</p>

<p>When there is no danger of confusion, any kind of computation is simply referred to as a computation.</p>

<h2>Constructing computations using <code>mkOne</code></h2>

<p>Computations of type <code>One</code> can be <em>constructed</em> using <code>mkOne</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">mkOne</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">z</span><span class="k">:</span> <span class="kt">Z</span><span class="o">)</span> <span class="k">=</span> <span class="nc">One</span><span class="o">(</span><span class="n">z</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Agreed, introducing <code>mkOne</code> is somewhat of an overkill,
but it is consistent with the way other kinds of computations are constructed
in this series of posts.</p>

<p>How are computations of type <code>One</code> <em>described</em>?</p>

<h2>Describing Computations of type <code>One</code></h2>

<p>Here is a computation of type <code>One</code> that is described using <code>mkOne</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">lazy</span> <span class="k">val</span> <span class="n">oneFoo</span> <span class="k">=</span> <span class="n">mkOne</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">oneFoo</span><span class="k">:</span> <span class="kt">Fp.One</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A <code>lazy val</code> is used to separate the description of the computation from its execution.</p>

<p>How are computations of type <code>One</code> <em>executed</em> once they are described?</p>

<h2>Executing Computations of type <code>One</code></h2>

<p>For the purpose of this series of blog posts,
executing a computation of type <code>One</code> can be as simple as <em>printing its value</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">execute</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">oz</span><span class="k">:</span> <span class="kt">One</span><span class="o">[</span><span class="kt">Z</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">oz</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">One</span><span class="o">(</span><span class="n">z</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">z</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below, the computation of type <code>One</code> is executed using <code>execute</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">execute</span><span class="o">(</span><span class="n">oneFoo</span><span class="o">)</span>
</span><span class='line'><span class="n">foo</span>
</span></code></pre></td></tr></table></div></figure>


<p>The computation <code>oneFoo</code> is defined as a <code>lazy val</code>.
<code>mkOne("foo")</code> is evaluated <em>the first time</em> that <code>oneFoo</code> is executed.
When <code>oneFoo</code> would have been defined as a <code>def</code>, then
<code>mkOne("foo")</code> would be evaluated <em>every time</em> that <code>oneFoo</code> is executed.
For <code>oneFoo</code> the difference does not matter
(apart from the fact that a <code>lazy val</code> is more time efficient and less space efficient than a <code>def</code>).
Sometimes the difference between a <code>lazy val</code> computation and a <code>def</code> computation <em>does</em> matter.</p>

<p>Declaring simple computations like <code>oneFoo</code> and executing them as <code>execute(oneFoo)</code> is,
of course, not the end of the story about computations of type <code>One</code>.</p>

<p>Is there not a way to <em>compose</em> computations of type <code>One</code>?</p>

<h2>Composing Pure Computations of type <code>One</code></h2>

<p>The implicit class below defines two methods, <code>bnd</code> and <code>and</code>, that can be used to
describe <em>more complex</em> computations by, somehow, <em>composing</em> them from <em>simpler</em> ones.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">implicit</span> <span class="k">class</span> <span class="nc">OneOps</span><span class="o">[</span><span class="kt">Z</span><span class="o">](</span><span class="n">oz</span><span class="k">:</span> <span class="kt">One</span><span class="o">[</span><span class="kt">Z</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">bnd</span><span class="o">[</span><span class="kt">Y</span><span class="o">](</span><span class="n">z2oy</span><span class="k">:</span> <span class="kt">Z</span> <span class="o">=&gt;</span> <span class="nc">One</span><span class="o">[</span><span class="kt">Y</span><span class="o">])</span><span class="k">:</span> <span class="kt">One</span><span class="o">[</span><span class="kt">Y</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>      <span class="n">oz</span><span class="o">.</span><span class="n">z</span> <span class="n">bind</span> <span class="n">z2oy</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">and</span><span class="o">[</span><span class="kt">Y</span><span class="o">](</span><span class="n">o_z2y</span><span class="k">:</span> <span class="kt">One</span><span class="o">[</span><span class="kt">Z</span> <span class="k">=&gt;</span> <span class="kt">Y</span><span class="o">])</span><span class="k">:</span> <span class="kt">One</span><span class="o">[</span><span class="kt">Y</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>      <span class="n">mkOne</span><span class="o">(</span><span class="n">oz</span><span class="o">.</span><span class="n">z</span> <span class="n">bind</span> <span class="n">o_z2y</span><span class="o">.</span><span class="n">z</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Although, strictly speaking, not necessary, <code>bnd</code> and <code>and</code> are defined in terms of <code>bind</code>.</p>

<h2>DSL for computations of type <code>One</code></h2>

<p>By now we have defined <code>mkOne</code>, <code>bnd</code> and <code>and</code></p>

<ul>
<li>They constitute a <em>declarative DSL for describing computations</em> of type <code>One</code></li>
</ul>


<p>We have also defined <code>execute</code></p>

<ul>
<li>It constitutes <em>an imperative DSL for executing computations</em> of type <code>One</code></li>
</ul>


<p>This section contains some examples on how to make use of those DSL&rsquo;s.</p>

<p>All examples make use of the following <code>add</code> function on strings</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">def</span> <span class="n">add</span><span class="o">(</span><span class="n">z</span><span class="k">:</span> <span class="kt">String</span><span class="o">)(</span><span class="n">y</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">z</span> <span class="o">+</span> <span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>add</code> is a <em>curried</em> version of the <code>+</code> operator on strings.</p>

<p>Let&rsquo;s start with a computation using <code>bnd</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:</span><span class="kt">paste</span>
</span><span class='line'><span class="c1">// Entering paste mode (ctrl-D to finish)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">lazy</span> <span class="k">val</span> <span class="n">oneFooBar01</span><span class="k">:</span> <span class="kt">One</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="n">mkOne</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">)</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">z</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">mkOne</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">)</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">y</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">mkOne</span><span class="o">(</span><span class="n">add</span><span class="o">(</span><span class="n">z</span><span class="o">)(</span><span class="n">y</span><span class="o">))</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Exiting paste mode, now interpreting.</span>
</span><span class='line'>
</span><span class='line'><span class="n">oneFooBar01</span><span class="k">:</span> <span class="kt">Fp.One</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">execute</span><span class="o">(</span><span class="n">oneFooBar01</span><span class="o">)</span>
</span><span class='line'><span class="n">foobar</span>
</span></code></pre></td></tr></table></div></figure>


<p>The declaration of <code>oneFooBar01</code> can, informally, be explained as follows</p>

<ul>
<li>evaluate the expression <code>"foo"</code> and bind the resulting value to the variable <code>z</code>, and then</li>
<li>evaluate the expression <code>"bar"</code> and bind the resulting value to the variable <code>y</code>, and then</li>
<li>result in the value obtained by adding <code>z</code> and <code>y</code></li>
</ul>


<p>Let&rsquo;s continue with a computation using <code>and</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:</span><span class="kt">paste</span>
</span><span class='line'><span class="c1">// Entering paste mode (ctrl-D to finish)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">lazy</span> <span class="k">val</span> <span class="n">oneFooBar02</span><span class="k">:</span> <span class="kt">One</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="n">mkOne</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">)</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mkOne</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">)</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mkOne</span><span class="o">(</span><span class="n">z</span> <span class="k">=&gt;</span> <span class="n">y</span> <span class="k">=&gt;</span> <span class="n">add</span><span class="o">(</span><span class="n">z</span><span class="o">)(</span><span class="n">y</span><span class="o">))</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Exiting paste mode, now interpreting.</span>
</span><span class='line'>
</span><span class='line'><span class="n">oneFooBar02</span><span class="k">:</span> <span class="kt">Fp.One</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">execute</span><span class="o">(</span><span class="n">oneFooBar02</span><span class="o">)</span>
</span><span class='line'><span class="n">foobar</span>
</span></code></pre></td></tr></table></div></figure>


<p>The declaration of <code>oneFooBar02</code> can, informally, be explained as follows</p>

<ul>
<li>evaluate the expression <code>"bar"</code>, and evaluate the expression <code>"foo"</code>, and then</li>
<li>bind the resulting values to the variables <code>y</code> and <code>z</code>, and then</li>
<li>result in the value obtained by adding <code>z</code> and <code>y</code></li>
</ul>


<p>Let&rsquo;s finish with a simplified version of the computation using <code>and</code> above
in which there are no variables used any more</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:</span><span class="kt">paste</span>
</span><span class='line'><span class="c1">// Entering paste mode (ctrl-D to finish)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">lazy</span> <span class="k">val</span> <span class="n">oneFooBar03</span><span class="k">:</span> <span class="kt">One</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="n">mkOne</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">)</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mkOne</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">)</span> <span class="n">and</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mkOne</span><span class="o">(</span><span class="n">add</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Exiting paste mode, now interpreting.</span>
</span><span class='line'>
</span><span class='line'><span class="n">oneFooBar03</span><span class="k">:</span> <span class="kt">Fp.One</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">&lt;</span><span class="k">lazy</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">execute</span><span class="o">(</span><span class="n">oneFooBar03</span><span class="o">)</span>
</span><span class='line'><span class="n">foobar</span>
</span></code></pre></td></tr></table></div></figure>


<p>The declaration of <code>oneFooBar03</code> can, informally, be explained as follows</p>

<ul>
<li>evaluate the expression <code>"bar"</code>, and evaluate the expression <code>"foo"</code>, and then</li>
<li>result in the value obtained by adding their resulting values</li>
</ul>


<p>You may ask yourself: <em>this looks like much ado about nothing</em>.
We might as well have written the following code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">val</span> <span class="n">z</span> <span class="k">=</span> <span class="s">&quot;foo&quot;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">z</span> <span class="k">=</span> <span class="s">&quot;bar&quot;</span>
</span><span class='line'>  <span class="n">add</span><span class="o">(</span><span class="n">z</span><span class="o">)(</span><span class="n">y</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, in a way you are right: for pure computations resulting in exactly one value,
introducing <code>mkOne</code>, <code>bnd</code> and <code>and</code> <em>is</em> much ado about nothing.
For more interesting kinds of computations, the situation is completely different.</p>

<p>Nevertheless it is already possible to formulate some interesting remarks.</p>

<h2>Some remarks</h2>

<p>First, a somewhat philosophical (and highly subjective) remark about <em>syntax</em>:</p>

<p>In <em>some</em> way, the DSL based code reads more natural <em>from left to right</em>
than the language based code. When initializing <code>z</code> with <code>"foo"</code> using <code>val z = "foo"</code>,
<em>first</em> the expression <code>"foo"</code> on the <em>right</em> hand side of <code>=</code> is evaluated and
<em>second</em> the variable <code>z</code> on the <em>left</em> hand side of <code>=</code> is initialized with the resulting value.
Not very left to right indeed (in fact <em>right to left</em> instead).
Agreed, in <em>another</em> way, the DSL based code reads less natural because of all those curly braces.
Their nesting is usually limited since it is not a good programming practice to define
computations using large pieces of code (good programmers write small pieces code).
The curly braces also have an advantage: they clearly delimit the scope of the variables that are introduced.
<em>Every disadvantage has its advantage</em> (a quote of the Dutch soccer player Johan Cruijff).</p>

<p>Second, a remark about <em>semantics</em>.</p>

<p>The semantics of the language based code is defined by the <em>language specification</em>.
The semantics of the DSL based code is defined by <em>you</em> (in terms of the semantics of <code>bnd</code> and <code>and</code>).
This provides you with more flexibility.
Agreed, again, in the case of pure computations resulting in exactly one value,
there is not really a lot of flexibility for you to define <code>bnd</code> and <code>and</code> in a meaningful way.
For more interesting kinds of computations, the situation is completely different.</p>

<h2>About abstraction</h2>

<p>The method <code>bnd</code> is more <em>specific</em> (<em>concrete</em>) than <code>and</code>
(the method <code>and</code> is more <em>general</em> (<em>abstract</em>) than <code>bnd</code>).</p>

<p>The method <code>and</code> is more abstract than <code>bnd</code> simply because the method <code>and</code> can be defined in terms of <code>bnd</code>
(the definition of <code>and</code> in terms of <code>bnd</code> is referred to as the <em>default</em> definition of <code>and</code>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">and</span><span class="o">[</span><span class="kt">Y</span><span class="o">](</span><span class="n">o_z2y</span><span class="k">:</span> <span class="kt">One</span><span class="o">[</span><span class="kt">Z</span> <span class="k">=&gt;</span> <span class="kt">Y</span><span class="o">])</span><span class="k">:</span> <span class="kt">One</span><span class="o">[</span><span class="kt">Y</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">oz</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">z</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">o_z2y</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">z2y</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">mkOne</span><span class="o">(</span><span class="n">z</span> <span class="n">bind</span> <span class="n">z2y</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For pure computations resulting in exactly one value, the two definitions are equivalent.
For more interesting kinds of computations,
<code>and</code> can be given a definition that is <em>not</em> equivalent with the default definition.</p>

<h2>About power of expression</h2>

<p>The method <code>bnd</code> is <em>more powerful</em> than <code>and</code>
(the method <code>and</code> is <em>less powerful</em> than <code>bnd</code>).</p>

<p>Below is an example that illustrates that the method <code>bnd</code> is more powerful than <code>and</code>:
when using <code>bnd</code> the variable <code>z</code> is <em>immediately in scope</em>, and can be used in the rest of the code,
for example, to decide, based on <code>z</code>, how to proceed</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">:</span><span class="kt">paste</span>
</span><span class='line'><span class="c1">// Entering paste mode (ctrl-D to finish)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">decideBasedOn</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">One</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="n">mkOne</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">s</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">s</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="s">&quot;foo&quot;</span> <span class="k">=&gt;</span> <span class="n">mkOne</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">)</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">t</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="n">mkOne</span><span class="o">(</span><span class="n">add</span><span class="o">(</span><span class="n">s</span><span class="o">)(</span><span class="n">t</span><span class="o">))</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">case</span> <span class="s">&quot;bar&quot;</span> <span class="k">=&gt;</span> <span class="n">mkOne</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">)</span> <span class="n">bnd</span> <span class="o">{</span> <span class="n">t</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="n">mkOne</span><span class="o">(</span><span class="n">add</span><span class="o">(</span><span class="n">s</span><span class="o">)(</span><span class="n">t</span><span class="o">))</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">mkOne</span><span class="o">(</span><span class="s">&quot;bogus&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Exiting paste mode, now interpreting.</span>
</span><span class='line'>
</span><span class='line'><span class="n">decideBasedOn</span><span class="k">:</span> <span class="o">(</span><span class="kt">string:</span> <span class="kt">String</span><span class="o">)</span><span class="kt">Fp.One</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">execute</span><span class="o">(</span><span class="n">decideBasedOn</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">))</span>
</span><span class='line'><span class="n">foobar</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">execute</span><span class="o">(</span><span class="n">decideBasedOn</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">))</span>
</span><span class='line'><span class="n">barfoo</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">execute</span><span class="o">(</span><span class="n">decideBasedOn</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">))</span>
</span><span class='line'><span class="n">bogus</span>
</span></code></pre></td></tr></table></div></figure>


<p>The bottom line of all this is that, for most computations, the choice is yours</p>

<ul>
<li>you can go for less abstract, more powerful composition (and less implementation flexibility)</li>
<li>you can go for more abstract, less powerful composition (and more implementation flexibility)</li>
</ul>


<p>It is all about choosing the <em>right level of abstraction</em>.
As a programmer, you should <em>value abstraction</em>:
it is a tool to <em>manage complexity</em>.</p>

<p>Consider the difference between using <code>bnd</code> and <code>and</code></p>

<ul>
<li>the description of <code>oneFooBar01</code> requires the usage of variables</li>
<li>the description of <code>oneFooBar03</code> does not require the usage of variables</li>
</ul>


<p>You may ask yourself: <em>are there any other ways to compose computations</em>?</p>

<h2>Other ways to compose computations</h2>

<p>The answer is <em>yes</em>, there is one other popular way to compose computations</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">type</span> <span class="o">==&gt;[</span><span class="kt">-Z</span>, <span class="kt">+Y</span><span class="o">]</span> <span class="k">=</span> <span class="n">Z</span> <span class="k">=&gt;</span> <span class="nc">One</span><span class="o">[</span><span class="kt">Y</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">class</span> <span class="nc">OneArrowOps</span><span class="o">[</span><span class="kt">Z</span>, <span class="kt">Y</span><span class="o">](</span><span class="n">oa_z2y</span><span class="k">:</span> <span class="kt">Z</span> <span class="o">=</span><span class="k">=&gt;</span> <span class="n">Y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="o">&gt;&gt;&gt;[</span><span class="kt">X</span><span class="o">](</span><span class="n">oa_y2x</span><span class="k">:</span> <span class="kt">Y</span> <span class="o">=</span><span class="k">=&gt;</span> <span class="n">X</span><span class="o">)</span><span class="k">:</span> <span class="kt">Z</span> <span class="o">=</span><span class="k">=&gt;</span> <span class="n">X</span> <span class="k">=</span>
</span><span class='line'>      <span class="n">z</span> <span class="k">=&gt;</span> <span class="n">z</span> <span class="n">bind</span> <span class="n">oa_z2y</span> <span class="n">bnd</span> <span class="n">oa_y2x</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the one hand, since <code>&gt;&gt;&gt;</code> can be defined in terms of <code>bnd</code> (as shown above)
<code>&gt;&gt;&gt;</code> is more abstract (and less powerful) than <code>bnd</code>.</p>

<p>On the other hand, since, in a way, <code>and</code> can be defined in terms of <code>&gt;&gt;&gt;</code> (not shown in this post)
<code>and</code> is more abstract (and less powerful) than <code>&gt;&gt;&gt;</code>.</p>

<p>The first series blog posts about functional programming
is not dealing with this third kind of computation composition.</p>

<h2>Reactive Programming</h2>

<p>So far we worked with pure computations resulting in exactly one value.
But, of course, there are also more interesting kinds of computations.</p>

<p><em>Reactive Programming</em>, deals with two important <em>computational features</em>: <em>failure</em> and <em>latency</em>.
Both should be dealt with for realizing <em>responsiveness</em>.</p>

<p><code>and</code> can be defined to deal with them in another way as <code>bnd</code>.</p>
]]></content>
  </entry>
  
</feed>
